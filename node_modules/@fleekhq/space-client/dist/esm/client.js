import { Empty } from 'google-protobuf/google/protobuf/empty_pb';
import { SpaceApiClient } from './definitions/SpaceServiceClientPb';
import { ListDirectoriesRequest, ToggleBucketBackupRequest, OpenFileRequest, CreateBucketRequest, AddItemsRequest, CreateFolderRequest, BackupKeysByPassphraseRequest, RecoverKeysByPassphraseRequest, ToggleFuseRequest, ListBucketsRequest, ListDirectoryRequest, ShareBucketRequest, JoinBucketRequest, ThreadInfo, GetPublicKeyRequest, ReadNotificationRequest, GetNotificationsRequest, HandleFilesInvitationRequest, DeleteKeyPairRequest, DeleteAccountRequest, GetUsageInfoRequest, GetStoredMnemonicRequest, RestoreKeyPairViaMnemonicRequest, GetSharedWithMeFilesRequest, ShareFilesViaPublicKeyRequest, GetAPISessionTokensRequest, GetRecentlySharedWithRequest, GeneratePublicFileLinkRequest, TestKeysPassphraseRequest, SetNotificationsLastSeenAtRequest, GenerateKeyPairRequest, FullPath, } from './definitions/space_pb';
var DEFAULT_BUCKET = 'personal';
var SpaceClient = /** @class */ (function () {
    function SpaceClient(opts) {
        var url = opts.url, options = opts.options, credentials = opts.credentials, _a = opts.defaultBucket, defaultBucket = _a === void 0 ? DEFAULT_BUCKET : _a;
        this.defaultBucket = defaultBucket;
        this.instance = new SpaceApiClient(url, credentials, options);
    }
    SpaceClient.prototype.listDirectory = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ListDirectoryRequest();
            var path = payload.path.replace(/^\//, '');
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setPath(path);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.listDirectory(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.listDirectories = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ListDirectoriesRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.listDirectories(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.toggleBucketBackup = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ToggleBucketBackupRequest();
            var backup = payload.backup, bucket = payload.bucket;
            request.setBucket(bucket);
            request.setBackup(backup);
            _this.instance.toggleBucketBackup(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.fileInfoSubscribe = function (metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new Empty();
        return this.instance.fileInfoSubscribe(request, metadata);
    };
    SpaceClient.prototype.txlSubscribe = function (metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new Empty();
        return this.instance.txlSubscribe(request, metadata);
    };
    SpaceClient.prototype.openFile = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new OpenFileRequest();
            var path = payload.path.replace(/^\//, '');
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setPath(path);
            request.setBucket(bucket || _this.defaultBucket);
            if (payload.dbId) {
                request.setDbid(payload.dbId);
            }
            _this.instance.openFile(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.createBucket = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new CreateBucketRequest();
            request.setSlug(payload.slug);
            _this.instance.createBucket(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.addItems = function (payload, metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new AddItemsRequest();
        var targetPath = payload.targetPath.replace(/^\//, '');
        var bucket = payload.bucket === '' ? null : payload.bucket;
        request.setTargetpath(targetPath);
        request.setSourcepathsList(payload.sourcePaths);
        request.setBucket(bucket || this.defaultBucket);
        var stream = this.instance.addItems(request, metadata);
        return stream;
    };
    SpaceClient.prototype.createFolder = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new CreateFolderRequest();
            var path = payload.path.replace(/^\//, '');
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setPath(path);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.createFolder(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.backupKeysByPassphrase = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new BackupKeysByPassphraseRequest();
            request.setUuid(payload.uuid);
            request.setPassphrase(payload.passphrase);
            _this.instance.backupKeysByPassphrase(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.recoverKeysByPassphrase = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new RecoverKeysByPassphraseRequest();
            request.setUuid(payload.uuid);
            request.setPassphrase(payload.passphrase);
            _this.instance.recoverKeysByPassphrase(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] toggleFuseDrive
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.toggleFuseDrive = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ToggleFuseRequest();
            request.setMountdrive(payload.mountDrive);
            _this.instance.toggleFuseDrive(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] getFuseDriveStatus
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.getFuseDriveStatus = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new Empty();
            _this.instance.getFuseDriveStatus(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.subscribe = function (metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new Empty();
        return this.instance.subscribe(request, metadata);
    };
    /**
     * [WIP] listBuckets
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.listBuckets = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ListBucketsRequest();
            _this.instance.listBuckets(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.shareBucket = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ShareBucketRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.shareBucket(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.joinBucket = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var threadInfo = new ThreadInfo();
            threadInfo.setKey(payload.threadInfo.key);
            threadInfo.setAddressesList(payload.threadInfo.addresses);
            var request = new JoinBucketRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setThreadinfo(threadInfo);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.joinBucket(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.setNotificationsLastSeenAt = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new SetNotificationsLastSeenAtRequest();
            request.setTimestamp(payload.timestamp);
            _this.instance.setNotificationsLastSeenAt(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getNotifications = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetNotificationsRequest();
            request.setSeek(payload.seek);
            request.setLimit(payload.limit);
            _this.instance.getNotifications(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.handleFilesInvitation = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new HandleFilesInvitationRequest();
            request.setInvitationid(payload.invitationID);
            request.setAccept(payload.accept);
            _this.instance.handleFilesInvitation(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getPublicKey = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetPublicKeyRequest();
            _this.instance.getPublicKey(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.notificationSubscribe = function (metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new Empty();
        return this.instance.notificationSubscribe(request, metadata);
    };
    SpaceClient.prototype.readNotification = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ReadNotificationRequest();
            request.setId(payload.ID);
            _this.instance.readNotification(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.deleteAccount = function (
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    payload, metadata) {
        var _this = this;
        if (payload === void 0) { payload = null; }
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new DeleteAccountRequest();
            _this.instance.deleteAccount(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.deleteKeyPair = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new DeleteKeyPairRequest();
            _this.instance.deleteKeyPair(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getUsageInfo = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetUsageInfoRequest();
            _this.instance.getUsageInfo(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getStoredMnemonic = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetStoredMnemonicRequest();
            _this.instance.getStoredMnemonic(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.restoreKeyPairViaMnemonic = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new RestoreKeyPairViaMnemonicRequest();
            request.setMnemonic(payload.mnemonic);
            _this.instance.restoreKeyPairViaMnemonic(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getSharedWithMeFiles = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetSharedWithMeFilesRequest();
            request.setSeek(payload.seek);
            request.setLimit(payload.limit);
            _this.instance.getSharedWithMeFiles(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.shareFilesViaPublicKey = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ShareFilesViaPublicKeyRequest();
            var paths = payload.paths.map(function (path) {
                var fullPath = new FullPath();
                var bucket = path.bucket === '' ? null : path.bucket;
                fullPath.setBucket(bucket || _this.defaultBucket);
                fullPath.setPath(path.path);
                if (path.dbId) {
                    fullPath.setDbid(path.dbId);
                }
                return fullPath;
            });
            request.setPathsList(paths);
            request.setPublickeysList(payload.publicKeys);
            _this.instance.shareFilesViaPublicKey(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getAPISessionTokens = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetAPISessionTokensRequest();
            _this.instance.getAPISessionTokens(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getRecentlySharedWith = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetRecentlySharedWithRequest();
            _this.instance.getRecentlySharedWith(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.generatePublicFileLink = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GeneratePublicFileLinkRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            var itemPaths = payload.itemPaths.map(function (path) { return path.replace(/^\//, ''); });
            request.setDbid(payload.dbId);
            request.setPassword(payload.password);
            request.setItempathsList(itemPaths);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.generatePublicFileLink(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.testKeysPassphrase = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new TestKeysPassphraseRequest();
            request.setUuid(payload.uuid);
            request.setPassphrase(payload.passphrase);
            _this.instance.testKeysPassphrase(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.generateKeyPairWithForce = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GenerateKeyPairRequest();
            _this.instance.generateKeyPairWithForce(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    return SpaceClient;
}());
export default SpaceClient;
//# sourceMappingURL=client.js.map