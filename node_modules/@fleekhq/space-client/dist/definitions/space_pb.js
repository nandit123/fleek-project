"use strict";
// source: space.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.space.AddItemResult', null, global);
goog.exportSymbol('proto.space.AddItemsRequest', null, global);
goog.exportSymbol('proto.space.AddItemsResponse', null, global);
goog.exportSymbol('proto.space.BackupKeysByPassphraseRequest', null, global);
goog.exportSymbol('proto.space.BackupKeysByPassphraseResponse', null, global);
goog.exportSymbol('proto.space.Bucket', null, global);
goog.exportSymbol('proto.space.BucketMember', null, global);
goog.exportSymbol('proto.space.CreateBucketRequest', null, global);
goog.exportSymbol('proto.space.CreateBucketResponse', null, global);
goog.exportSymbol('proto.space.CreateFolderRequest', null, global);
goog.exportSymbol('proto.space.CreateFolderResponse', null, global);
goog.exportSymbol('proto.space.CreateLocalKeysBackupRequest', null, global);
goog.exportSymbol('proto.space.CreateLocalKeysBackupResponse', null, global);
goog.exportSymbol('proto.space.DeleteAccountRequest', null, global);
goog.exportSymbol('proto.space.DeleteAccountResponse', null, global);
goog.exportSymbol('proto.space.DeleteKeyPairRequest', null, global);
goog.exportSymbol('proto.space.DeleteKeyPairResponse', null, global);
goog.exportSymbol('proto.space.EventType', null, global);
goog.exportSymbol('proto.space.FileEventResponse', null, global);
goog.exportSymbol('proto.space.FileInfoEventResponse', null, global);
goog.exportSymbol('proto.space.FileMember', null, global);
goog.exportSymbol('proto.space.FullPath', null, global);
goog.exportSymbol('proto.space.FuseDriveResponse', null, global);
goog.exportSymbol('proto.space.GenerateKeyPairRequest', null, global);
goog.exportSymbol('proto.space.GenerateKeyPairResponse', null, global);
goog.exportSymbol('proto.space.GeneratePublicFileLinkRequest', null, global);
goog.exportSymbol('proto.space.GeneratePublicFileLinkResponse', null, global);
goog.exportSymbol('proto.space.GetAPISessionTokensRequest', null, global);
goog.exportSymbol('proto.space.GetAPISessionTokensResponse', null, global);
goog.exportSymbol('proto.space.GetNotificationsRequest', null, global);
goog.exportSymbol('proto.space.GetNotificationsResponse', null, global);
goog.exportSymbol('proto.space.GetPublicKeyRequest', null, global);
goog.exportSymbol('proto.space.GetPublicKeyResponse', null, global);
goog.exportSymbol('proto.space.GetRecentlySharedWithRequest', null, global);
goog.exportSymbol('proto.space.GetRecentlySharedWithResponse', null, global);
goog.exportSymbol('proto.space.GetSharedWithMeFilesRequest', null, global);
goog.exportSymbol('proto.space.GetSharedWithMeFilesResponse', null, global);
goog.exportSymbol('proto.space.GetStoredMnemonicRequest', null, global);
goog.exportSymbol('proto.space.GetStoredMnemonicResponse', null, global);
goog.exportSymbol('proto.space.GetUsageInfoRequest', null, global);
goog.exportSymbol('proto.space.GetUsageInfoResponse', null, global);
goog.exportSymbol('proto.space.HandleFilesInvitationRequest', null, global);
goog.exportSymbol('proto.space.HandleFilesInvitationResponse', null, global);
goog.exportSymbol('proto.space.Invitation', null, global);
goog.exportSymbol('proto.space.InvitationAccept', null, global);
goog.exportSymbol('proto.space.InvitationStatus', null, global);
goog.exportSymbol('proto.space.JoinBucketRequest', null, global);
goog.exportSymbol('proto.space.JoinBucketResponse', null, global);
goog.exportSymbol('proto.space.ListBucketsRequest', null, global);
goog.exportSymbol('proto.space.ListBucketsResponse', null, global);
goog.exportSymbol('proto.space.ListDirectoriesRequest', null, global);
goog.exportSymbol('proto.space.ListDirectoriesResponse', null, global);
goog.exportSymbol('proto.space.ListDirectoryEntry', null, global);
goog.exportSymbol('proto.space.ListDirectoryRequest', null, global);
goog.exportSymbol('proto.space.ListDirectoryResponse', null, global);
goog.exportSymbol('proto.space.Notification', null, global);
goog.exportSymbol('proto.space.Notification.RelatedobjectCase', null, global);
goog.exportSymbol('proto.space.NotificationEventResponse', null, global);
goog.exportSymbol('proto.space.NotificationType', null, global);
goog.exportSymbol('proto.space.OpenFileRequest', null, global);
goog.exportSymbol('proto.space.OpenFileResponse', null, global);
goog.exportSymbol('proto.space.OpenPublicFileRequest', null, global);
goog.exportSymbol('proto.space.OpenPublicFileResponse', null, global);
goog.exportSymbol('proto.space.ReadNotificationRequest', null, global);
goog.exportSymbol('proto.space.ReadNotificationResponse', null, global);
goog.exportSymbol('proto.space.RecoverKeysByLocalBackupRequest', null, global);
goog.exportSymbol('proto.space.RecoverKeysByLocalBackupResponse', null, global);
goog.exportSymbol('proto.space.RecoverKeysByPassphraseRequest', null, global);
goog.exportSymbol('proto.space.RecoverKeysByPassphraseResponse', null, global);
goog.exportSymbol('proto.space.RestoreKeyPairViaMnemonicRequest', null, global);
goog.exportSymbol('proto.space.RestoreKeyPairViaMnemonicResponse', null, global);
goog.exportSymbol('proto.space.SetNotificationsLastSeenAtRequest', null, global);
goog.exportSymbol('proto.space.SetNotificationsLastSeenAtResponse', null, global);
goog.exportSymbol('proto.space.ShareBucketRequest', null, global);
goog.exportSymbol('proto.space.ShareBucketResponse', null, global);
goog.exportSymbol('proto.space.ShareFilesViaPublicKeyRequest', null, global);
goog.exportSymbol('proto.space.ShareFilesViaPublicKeyResponse', null, global);
goog.exportSymbol('proto.space.SharedListDirectoryEntry', null, global);
goog.exportSymbol('proto.space.TestKeysPassphraseRequest', null, global);
goog.exportSymbol('proto.space.TestKeysPassphraseResponse', null, global);
goog.exportSymbol('proto.space.TextileEventResponse', null, global);
goog.exportSymbol('proto.space.ThreadInfo', null, global);
goog.exportSymbol('proto.space.ToggleBucketBackupRequest', null, global);
goog.exportSymbol('proto.space.ToggleBucketBackupResponse', null, global);
goog.exportSymbol('proto.space.ToggleFuseRequest', null, global);
goog.exportSymbol('proto.space.UsageAlert', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.SetNotificationsLastSeenAtRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.SetNotificationsLastSeenAtRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.SetNotificationsLastSeenAtRequest.displayName = 'proto.space.SetNotificationsLastSeenAtRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.SetNotificationsLastSeenAtResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.SetNotificationsLastSeenAtResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.SetNotificationsLastSeenAtResponse.displayName = 'proto.space.SetNotificationsLastSeenAtResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetSharedWithMeFilesRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetSharedWithMeFilesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetSharedWithMeFilesRequest.displayName = 'proto.space.GetSharedWithMeFilesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetSharedWithMeFilesResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.GetSharedWithMeFilesResponse.repeatedFields_, null);
};
goog.inherits(proto.space.GetSharedWithMeFilesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetSharedWithMeFilesResponse.displayName = 'proto.space.GetSharedWithMeFilesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetUsageInfoRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetUsageInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetUsageInfoRequest.displayName = 'proto.space.GetUsageInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetUsageInfoResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetUsageInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetUsageInfoResponse.displayName = 'proto.space.GetUsageInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ToggleBucketBackupRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ToggleBucketBackupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ToggleBucketBackupRequest.displayName = 'proto.space.ToggleBucketBackupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ToggleBucketBackupResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ToggleBucketBackupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ToggleBucketBackupResponse.displayName = 'proto.space.ToggleBucketBackupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ListDirectoriesRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ListDirectoriesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ListDirectoriesRequest.displayName = 'proto.space.ListDirectoriesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.FileMember = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.FileMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.FileMember.displayName = 'proto.space.FileMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ListDirectoryEntry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.ListDirectoryEntry.repeatedFields_, null);
};
goog.inherits(proto.space.ListDirectoryEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ListDirectoryEntry.displayName = 'proto.space.ListDirectoryEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.SharedListDirectoryEntry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.SharedListDirectoryEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.SharedListDirectoryEntry.displayName = 'proto.space.SharedListDirectoryEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ListDirectoriesResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.ListDirectoriesResponse.repeatedFields_, null);
};
goog.inherits(proto.space.ListDirectoriesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ListDirectoriesResponse.displayName = 'proto.space.ListDirectoriesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ListDirectoryRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ListDirectoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ListDirectoryRequest.displayName = 'proto.space.ListDirectoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ListDirectoryResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.ListDirectoryResponse.repeatedFields_, null);
};
goog.inherits(proto.space.ListDirectoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ListDirectoryResponse.displayName = 'proto.space.ListDirectoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.CreateBucketRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.CreateBucketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.CreateBucketRequest.displayName = 'proto.space.CreateBucketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.BucketMember = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.BucketMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.BucketMember.displayName = 'proto.space.BucketMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.Bucket = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.Bucket.repeatedFields_, null);
};
goog.inherits(proto.space.Bucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.Bucket.displayName = 'proto.space.Bucket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.CreateBucketResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.CreateBucketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.CreateBucketResponse.displayName = 'proto.space.CreateBucketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GenerateKeyPairRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GenerateKeyPairRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GenerateKeyPairRequest.displayName = 'proto.space.GenerateKeyPairRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GenerateKeyPairResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GenerateKeyPairResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GenerateKeyPairResponse.displayName = 'proto.space.GenerateKeyPairResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetStoredMnemonicRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetStoredMnemonicRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetStoredMnemonicRequest.displayName = 'proto.space.GetStoredMnemonicRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetStoredMnemonicResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetStoredMnemonicResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetStoredMnemonicResponse.displayName = 'proto.space.GetStoredMnemonicResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.RestoreKeyPairViaMnemonicRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.RestoreKeyPairViaMnemonicRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.RestoreKeyPairViaMnemonicRequest.displayName = 'proto.space.RestoreKeyPairViaMnemonicRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.RestoreKeyPairViaMnemonicResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.RestoreKeyPairViaMnemonicResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.RestoreKeyPairViaMnemonicResponse.displayName = 'proto.space.RestoreKeyPairViaMnemonicResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.FileEventResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.FileEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.FileEventResponse.displayName = 'proto.space.FileEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.FileInfoEventResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.FileInfoEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.FileInfoEventResponse.displayName = 'proto.space.FileInfoEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.TextileEventResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.TextileEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.TextileEventResponse.displayName = 'proto.space.TextileEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.OpenFileRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.OpenFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.OpenFileRequest.displayName = 'proto.space.OpenFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.OpenFileResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.OpenFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.OpenFileResponse.displayName = 'proto.space.OpenFileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.OpenPublicFileRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.OpenPublicFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.OpenPublicFileRequest.displayName = 'proto.space.OpenPublicFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.OpenPublicFileResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.OpenPublicFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.OpenPublicFileResponse.displayName = 'proto.space.OpenPublicFileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.AddItemsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.AddItemsRequest.repeatedFields_, null);
};
goog.inherits(proto.space.AddItemsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.AddItemsRequest.displayName = 'proto.space.AddItemsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.AddItemResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.AddItemResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.AddItemResult.displayName = 'proto.space.AddItemResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.AddItemsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.AddItemsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.AddItemsResponse.displayName = 'proto.space.AddItemsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.CreateFolderRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.CreateFolderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.CreateFolderRequest.displayName = 'proto.space.CreateFolderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.CreateFolderResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.CreateFolderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.CreateFolderResponse.displayName = 'proto.space.CreateFolderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.BackupKeysByPassphraseRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.BackupKeysByPassphraseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.BackupKeysByPassphraseRequest.displayName = 'proto.space.BackupKeysByPassphraseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.BackupKeysByPassphraseResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.BackupKeysByPassphraseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.BackupKeysByPassphraseResponse.displayName = 'proto.space.BackupKeysByPassphraseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.RecoverKeysByPassphraseRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.RecoverKeysByPassphraseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.RecoverKeysByPassphraseRequest.displayName = 'proto.space.RecoverKeysByPassphraseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.RecoverKeysByPassphraseResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.RecoverKeysByPassphraseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.RecoverKeysByPassphraseResponse.displayName = 'proto.space.RecoverKeysByPassphraseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.TestKeysPassphraseRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.TestKeysPassphraseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.TestKeysPassphraseRequest.displayName = 'proto.space.TestKeysPassphraseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.TestKeysPassphraseResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.TestKeysPassphraseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.TestKeysPassphraseResponse.displayName = 'proto.space.TestKeysPassphraseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ThreadInfo = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.ThreadInfo.repeatedFields_, null);
};
goog.inherits(proto.space.ThreadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ThreadInfo.displayName = 'proto.space.ThreadInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ShareBucketRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ShareBucketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ShareBucketRequest.displayName = 'proto.space.ShareBucketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ShareBucketResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ShareBucketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ShareBucketResponse.displayName = 'proto.space.ShareBucketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.JoinBucketRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.JoinBucketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.JoinBucketRequest.displayName = 'proto.space.JoinBucketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.JoinBucketResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.JoinBucketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.JoinBucketResponse.displayName = 'proto.space.JoinBucketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ShareFilesViaPublicKeyRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.ShareFilesViaPublicKeyRequest.repeatedFields_, null);
};
goog.inherits(proto.space.ShareFilesViaPublicKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ShareFilesViaPublicKeyRequest.displayName = 'proto.space.ShareFilesViaPublicKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.FullPath = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.FullPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.FullPath.displayName = 'proto.space.FullPath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ShareFilesViaPublicKeyResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ShareFilesViaPublicKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ShareFilesViaPublicKeyResponse.displayName = 'proto.space.ShareFilesViaPublicKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GeneratePublicFileLinkRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.GeneratePublicFileLinkRequest.repeatedFields_, null);
};
goog.inherits(proto.space.GeneratePublicFileLinkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GeneratePublicFileLinkRequest.displayName = 'proto.space.GeneratePublicFileLinkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GeneratePublicFileLinkResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GeneratePublicFileLinkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GeneratePublicFileLinkResponse.displayName = 'proto.space.GeneratePublicFileLinkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ToggleFuseRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ToggleFuseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ToggleFuseRequest.displayName = 'proto.space.ToggleFuseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.FuseDriveResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.FuseDriveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.FuseDriveResponse.displayName = 'proto.space.FuseDriveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ListBucketsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ListBucketsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ListBucketsRequest.displayName = 'proto.space.ListBucketsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ListBucketsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.ListBucketsResponse.repeatedFields_, null);
};
goog.inherits(proto.space.ListBucketsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ListBucketsResponse.displayName = 'proto.space.ListBucketsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.Invitation = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.Invitation.repeatedFields_, null);
};
goog.inherits(proto.space.Invitation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.Invitation.displayName = 'proto.space.Invitation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.UsageAlert = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.UsageAlert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.UsageAlert.displayName = 'proto.space.UsageAlert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.InvitationAccept = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.InvitationAccept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.InvitationAccept.displayName = 'proto.space.InvitationAccept';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.Notification = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.space.Notification.oneofGroups_);
};
goog.inherits(proto.space.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.Notification.displayName = 'proto.space.Notification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.HandleFilesInvitationRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.HandleFilesInvitationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.HandleFilesInvitationRequest.displayName = 'proto.space.HandleFilesInvitationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.HandleFilesInvitationResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.HandleFilesInvitationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.HandleFilesInvitationResponse.displayName = 'proto.space.HandleFilesInvitationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.NotificationEventResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.NotificationEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.NotificationEventResponse.displayName = 'proto.space.NotificationEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetNotificationsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetNotificationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetNotificationsRequest.displayName = 'proto.space.GetNotificationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetNotificationsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.GetNotificationsResponse.repeatedFields_, null);
};
goog.inherits(proto.space.GetNotificationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetNotificationsResponse.displayName = 'proto.space.GetNotificationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ReadNotificationRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ReadNotificationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ReadNotificationRequest.displayName = 'proto.space.ReadNotificationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.ReadNotificationResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.ReadNotificationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.ReadNotificationResponse.displayName = 'proto.space.ReadNotificationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetPublicKeyRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetPublicKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetPublicKeyRequest.displayName = 'proto.space.GetPublicKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetPublicKeyResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetPublicKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetPublicKeyResponse.displayName = 'proto.space.GetPublicKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.RecoverKeysByLocalBackupRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.RecoverKeysByLocalBackupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.RecoverKeysByLocalBackupRequest.displayName = 'proto.space.RecoverKeysByLocalBackupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.RecoverKeysByLocalBackupResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.RecoverKeysByLocalBackupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.RecoverKeysByLocalBackupResponse.displayName = 'proto.space.RecoverKeysByLocalBackupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.CreateLocalKeysBackupRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.CreateLocalKeysBackupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.CreateLocalKeysBackupRequest.displayName = 'proto.space.CreateLocalKeysBackupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.CreateLocalKeysBackupResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.CreateLocalKeysBackupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.CreateLocalKeysBackupResponse.displayName = 'proto.space.CreateLocalKeysBackupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.DeleteAccountRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.DeleteAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.DeleteAccountRequest.displayName = 'proto.space.DeleteAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.DeleteAccountResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.DeleteAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.DeleteAccountResponse.displayName = 'proto.space.DeleteAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.DeleteKeyPairRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.DeleteKeyPairRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.DeleteKeyPairRequest.displayName = 'proto.space.DeleteKeyPairRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.DeleteKeyPairResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.DeleteKeyPairResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.DeleteKeyPairResponse.displayName = 'proto.space.DeleteKeyPairResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetAPISessionTokensRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetAPISessionTokensRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetAPISessionTokensRequest.displayName = 'proto.space.GetAPISessionTokensRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetAPISessionTokensResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetAPISessionTokensResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetAPISessionTokensResponse.displayName = 'proto.space.GetAPISessionTokensResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetRecentlySharedWithRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.space.GetRecentlySharedWithRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetRecentlySharedWithRequest.displayName = 'proto.space.GetRecentlySharedWithRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.space.GetRecentlySharedWithResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.space.GetRecentlySharedWithResponse.repeatedFields_, null);
};
goog.inherits(proto.space.GetRecentlySharedWithResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.space.GetRecentlySharedWithResponse.displayName = 'proto.space.GetRecentlySharedWithResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.SetNotificationsLastSeenAtRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.SetNotificationsLastSeenAtRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.SetNotificationsLastSeenAtRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.SetNotificationsLastSeenAtRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.SetNotificationsLastSeenAtRequest}
 */
proto.space.SetNotificationsLastSeenAtRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.SetNotificationsLastSeenAtRequest;
    return proto.space.SetNotificationsLastSeenAtRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.SetNotificationsLastSeenAtRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.SetNotificationsLastSeenAtRequest}
 */
proto.space.SetNotificationsLastSeenAtRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTimestamp(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.SetNotificationsLastSeenAtRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.SetNotificationsLastSeenAtRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.SetNotificationsLastSeenAtRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.SetNotificationsLastSeenAtRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTimestamp();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
};
/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.space.SetNotificationsLastSeenAtRequest.prototype.getTimestamp = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.SetNotificationsLastSeenAtRequest} returns this
 */
proto.space.SetNotificationsLastSeenAtRequest.prototype.setTimestamp = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.SetNotificationsLastSeenAtResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.SetNotificationsLastSeenAtResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.SetNotificationsLastSeenAtResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.SetNotificationsLastSeenAtResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.SetNotificationsLastSeenAtResponse}
 */
proto.space.SetNotificationsLastSeenAtResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.SetNotificationsLastSeenAtResponse;
    return proto.space.SetNotificationsLastSeenAtResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.SetNotificationsLastSeenAtResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.SetNotificationsLastSeenAtResponse}
 */
proto.space.SetNotificationsLastSeenAtResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.SetNotificationsLastSeenAtResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.SetNotificationsLastSeenAtResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.SetNotificationsLastSeenAtResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.SetNotificationsLastSeenAtResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetSharedWithMeFilesRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetSharedWithMeFilesRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetSharedWithMeFilesRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetSharedWithMeFilesRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            seek: jspb.Message.getFieldWithDefault(msg, 1, ""),
            limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetSharedWithMeFilesRequest}
 */
proto.space.GetSharedWithMeFilesRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetSharedWithMeFilesRequest;
    return proto.space.GetSharedWithMeFilesRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetSharedWithMeFilesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetSharedWithMeFilesRequest}
 */
proto.space.GetSharedWithMeFilesRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSeek(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLimit(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetSharedWithMeFilesRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetSharedWithMeFilesRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetSharedWithMeFilesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetSharedWithMeFilesRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSeek();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getLimit();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
};
/**
 * optional string seek = 1;
 * @return {string}
 */
proto.space.GetSharedWithMeFilesRequest.prototype.getSeek = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetSharedWithMeFilesRequest} returns this
 */
proto.space.GetSharedWithMeFilesRequest.prototype.setSeek = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.space.GetSharedWithMeFilesRequest.prototype.getLimit = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetSharedWithMeFilesRequest} returns this
 */
proto.space.GetSharedWithMeFilesRequest.prototype.setLimit = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.GetSharedWithMeFilesResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetSharedWithMeFilesResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetSharedWithMeFilesResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetSharedWithMeFilesResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetSharedWithMeFilesResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            itemsList: jspb.Message.toObjectList(msg.getItemsList(), proto.space.SharedListDirectoryEntry.toObject, includeInstance),
            nextoffset: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetSharedWithMeFilesResponse}
 */
proto.space.GetSharedWithMeFilesResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetSharedWithMeFilesResponse;
    return proto.space.GetSharedWithMeFilesResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetSharedWithMeFilesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetSharedWithMeFilesResponse}
 */
proto.space.GetSharedWithMeFilesResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.SharedListDirectoryEntry;
                reader.readMessage(value, proto.space.SharedListDirectoryEntry.deserializeBinaryFromReader);
                msg.addItems(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNextoffset(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetSharedWithMeFilesResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetSharedWithMeFilesResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetSharedWithMeFilesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetSharedWithMeFilesResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getItemsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.space.SharedListDirectoryEntry.serializeBinaryToWriter);
    }
    f = message.getNextoffset();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * repeated SharedListDirectoryEntry items = 1;
 * @return {!Array<!proto.space.SharedListDirectoryEntry>}
 */
proto.space.GetSharedWithMeFilesResponse.prototype.getItemsList = function () {
    return /** @type{!Array<!proto.space.SharedListDirectoryEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.SharedListDirectoryEntry, 1));
};
/**
 * @param {!Array<!proto.space.SharedListDirectoryEntry>} value
 * @return {!proto.space.GetSharedWithMeFilesResponse} returns this
*/
proto.space.GetSharedWithMeFilesResponse.prototype.setItemsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.space.SharedListDirectoryEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.SharedListDirectoryEntry}
 */
proto.space.GetSharedWithMeFilesResponse.prototype.addItems = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.space.SharedListDirectoryEntry, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.GetSharedWithMeFilesResponse} returns this
 */
proto.space.GetSharedWithMeFilesResponse.prototype.clearItemsList = function () {
    return this.setItemsList([]);
};
/**
 * optional string nextOffset = 2;
 * @return {string}
 */
proto.space.GetSharedWithMeFilesResponse.prototype.getNextoffset = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetSharedWithMeFilesResponse} returns this
 */
proto.space.GetSharedWithMeFilesResponse.prototype.setNextoffset = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetUsageInfoRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetUsageInfoRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetUsageInfoRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetUsageInfoRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetUsageInfoRequest}
 */
proto.space.GetUsageInfoRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetUsageInfoRequest;
    return proto.space.GetUsageInfoRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetUsageInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetUsageInfoRequest}
 */
proto.space.GetUsageInfoRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetUsageInfoRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetUsageInfoRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetUsageInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetUsageInfoRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetUsageInfoResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetUsageInfoResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetUsageInfoResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetUsageInfoResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            localstarogeused: jspb.Message.getFieldWithDefault(msg, 1, 0),
            localbandwidthused: jspb.Message.getFieldWithDefault(msg, 2, 0),
            spacestorageused: jspb.Message.getFieldWithDefault(msg, 3, 0),
            spacebandwidthused: jspb.Message.getFieldWithDefault(msg, 4, 0),
            usagequota: jspb.Message.getFieldWithDefault(msg, 5, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetUsageInfoResponse}
 */
proto.space.GetUsageInfoResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetUsageInfoResponse;
    return proto.space.GetUsageInfoResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetUsageInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetUsageInfoResponse}
 */
proto.space.GetUsageInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setLocalstarogeused(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setLocalbandwidthused(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setSpacestorageused(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setSpacebandwidthused(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setUsagequota(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetUsageInfoResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetUsageInfoResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetUsageInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetUsageInfoResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLocalstarogeused();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getLocalbandwidthused();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getSpacestorageused();
    if (f !== 0) {
        writer.writeUint64(3, f);
    }
    f = message.getSpacebandwidthused();
    if (f !== 0) {
        writer.writeUint64(4, f);
    }
    f = message.getUsagequota();
    if (f !== 0) {
        writer.writeUint64(5, f);
    }
};
/**
 * optional uint64 localStarogeUsed = 1;
 * @return {number}
 */
proto.space.GetUsageInfoResponse.prototype.getLocalstarogeused = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetUsageInfoResponse} returns this
 */
proto.space.GetUsageInfoResponse.prototype.setLocalstarogeused = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional uint64 localBandwidthUsed = 2;
 * @return {number}
 */
proto.space.GetUsageInfoResponse.prototype.getLocalbandwidthused = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetUsageInfoResponse} returns this
 */
proto.space.GetUsageInfoResponse.prototype.setLocalbandwidthused = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional uint64 spaceStorageUsed = 3;
 * @return {number}
 */
proto.space.GetUsageInfoResponse.prototype.getSpacestorageused = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetUsageInfoResponse} returns this
 */
proto.space.GetUsageInfoResponse.prototype.setSpacestorageused = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional uint64 spaceBandwidthUsed = 4;
 * @return {number}
 */
proto.space.GetUsageInfoResponse.prototype.getSpacebandwidthused = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetUsageInfoResponse} returns this
 */
proto.space.GetUsageInfoResponse.prototype.setSpacebandwidthused = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional uint64 usageQuota = 5;
 * @return {number}
 */
proto.space.GetUsageInfoResponse.prototype.getUsagequota = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetUsageInfoResponse} returns this
 */
proto.space.GetUsageInfoResponse.prototype.setUsagequota = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ToggleBucketBackupRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ToggleBucketBackupRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ToggleBucketBackupRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ToggleBucketBackupRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucket: jspb.Message.getFieldWithDefault(msg, 1, ""),
            backup: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ToggleBucketBackupRequest}
 */
proto.space.ToggleBucketBackupRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ToggleBucketBackupRequest;
    return proto.space.ToggleBucketBackupRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ToggleBucketBackupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ToggleBucketBackupRequest}
 */
proto.space.ToggleBucketBackupRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setBackup(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ToggleBucketBackupRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ToggleBucketBackupRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ToggleBucketBackupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ToggleBucketBackupRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getBackup();
    if (f) {
        writer.writeBool(2, f);
    }
};
/**
 * optional string bucket = 1;
 * @return {string}
 */
proto.space.ToggleBucketBackupRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ToggleBucketBackupRequest} returns this
 */
proto.space.ToggleBucketBackupRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bool backup = 2;
 * @return {boolean}
 */
proto.space.ToggleBucketBackupRequest.prototype.getBackup = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.ToggleBucketBackupRequest} returns this
 */
proto.space.ToggleBucketBackupRequest.prototype.setBackup = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ToggleBucketBackupResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ToggleBucketBackupResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ToggleBucketBackupResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ToggleBucketBackupResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ToggleBucketBackupResponse}
 */
proto.space.ToggleBucketBackupResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ToggleBucketBackupResponse;
    return proto.space.ToggleBucketBackupResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ToggleBucketBackupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ToggleBucketBackupResponse}
 */
proto.space.ToggleBucketBackupResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ToggleBucketBackupResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ToggleBucketBackupResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ToggleBucketBackupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ToggleBucketBackupResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ListDirectoriesRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ListDirectoriesRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ListDirectoriesRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ListDirectoriesRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucket: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ListDirectoriesRequest}
 */
proto.space.ListDirectoriesRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ListDirectoriesRequest;
    return proto.space.ListDirectoriesRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ListDirectoriesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ListDirectoriesRequest}
 */
proto.space.ListDirectoriesRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ListDirectoriesRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ListDirectoriesRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ListDirectoriesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ListDirectoriesRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string bucket = 1;
 * @return {string}
 */
proto.space.ListDirectoriesRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoriesRequest} returns this
 */
proto.space.ListDirectoriesRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.FileMember.prototype.toObject = function (opt_includeInstance) {
        return proto.space.FileMember.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.FileMember} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.FileMember.toObject = function (includeInstance, msg) {
        var f, obj = {
            publickey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            address: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.FileMember}
 */
proto.space.FileMember.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.FileMember;
    return proto.space.FileMember.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.FileMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.FileMember}
 */
proto.space.FileMember.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPublickey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.FileMember.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.FileMember.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.FileMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.FileMember.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPublickey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string publicKey = 1;
 * @return {string}
 */
proto.space.FileMember.prototype.getPublickey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.FileMember} returns this
 */
proto.space.FileMember.prototype.setPublickey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string address = 2;
 * @return {string}
 */
proto.space.FileMember.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.FileMember} returns this
 */
proto.space.FileMember.prototype.setAddress = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.ListDirectoryEntry.repeatedFields_ = [11];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ListDirectoryEntry.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ListDirectoryEntry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ListDirectoryEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ListDirectoryEntry.toObject = function (includeInstance, msg) {
        var f, obj = {
            path: jspb.Message.getFieldWithDefault(msg, 1, ""),
            isdir: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
            name: jspb.Message.getFieldWithDefault(msg, 3, ""),
            sizeinbytes: jspb.Message.getFieldWithDefault(msg, 4, ""),
            created: jspb.Message.getFieldWithDefault(msg, 5, ""),
            updated: jspb.Message.getFieldWithDefault(msg, 6, ""),
            fileextension: jspb.Message.getFieldWithDefault(msg, 7, ""),
            ipfshash: jspb.Message.getFieldWithDefault(msg, 8, ""),
            islocallyavailable: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
            backupcount: jspb.Message.getFieldWithDefault(msg, 10, 0),
            membersList: jspb.Message.toObjectList(msg.getMembersList(), proto.space.FileMember.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ListDirectoryEntry}
 */
proto.space.ListDirectoryEntry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ListDirectoryEntry;
    return proto.space.ListDirectoryEntry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ListDirectoryEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ListDirectoryEntry}
 */
proto.space.ListDirectoryEntry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsdir(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setSizeinbytes(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreated(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setUpdated(value);
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setFileextension(value);
                break;
            case 8:
                var value = /** @type {string} */ (reader.readString());
                msg.setIpfshash(value);
                break;
            case 9:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIslocallyavailable(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setBackupcount(value);
                break;
            case 11:
                var value = new proto.space.FileMember;
                reader.readMessage(value, proto.space.FileMember.deserializeBinaryFromReader);
                msg.addMembers(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ListDirectoryEntry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ListDirectoryEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ListDirectoryEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ListDirectoryEntry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getIsdir();
    if (f) {
        writer.writeBool(2, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getSizeinbytes();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getCreated();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
    f = message.getUpdated();
    if (f.length > 0) {
        writer.writeString(6, f);
    }
    f = message.getFileextension();
    if (f.length > 0) {
        writer.writeString(7, f);
    }
    f = message.getIpfshash();
    if (f.length > 0) {
        writer.writeString(8, f);
    }
    f = message.getIslocallyavailable();
    if (f) {
        writer.writeBool(9, f);
    }
    f = message.getBackupcount();
    if (f !== 0) {
        writer.writeInt64(10, f);
    }
    f = message.getMembersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(11, f, proto.space.FileMember.serializeBinaryToWriter);
    }
};
/**
 * optional string path = 1;
 * @return {string}
 */
proto.space.ListDirectoryEntry.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setPath = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bool isDir = 2;
 * @return {boolean}
 */
proto.space.ListDirectoryEntry.prototype.getIsdir = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setIsdir = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};
/**
 * optional string name = 3;
 * @return {string}
 */
proto.space.ListDirectoryEntry.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string sizeInBytes = 4;
 * @return {string}
 */
proto.space.ListDirectoryEntry.prototype.getSizeinbytes = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setSizeinbytes = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string created = 5;
 * @return {string}
 */
proto.space.ListDirectoryEntry.prototype.getCreated = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setCreated = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional string updated = 6;
 * @return {string}
 */
proto.space.ListDirectoryEntry.prototype.getUpdated = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setUpdated = function (value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};
/**
 * optional string fileExtension = 7;
 * @return {string}
 */
proto.space.ListDirectoryEntry.prototype.getFileextension = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setFileextension = function (value) {
    return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string ipfsHash = 8;
 * @return {string}
 */
proto.space.ListDirectoryEntry.prototype.getIpfshash = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setIpfshash = function (value) {
    return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional bool isLocallyAvailable = 9;
 * @return {boolean}
 */
proto.space.ListDirectoryEntry.prototype.getIslocallyavailable = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setIslocallyavailable = function (value) {
    return jspb.Message.setProto3BooleanField(this, 9, value);
};
/**
 * optional int64 backupCount = 10;
 * @return {number}
 */
proto.space.ListDirectoryEntry.prototype.getBackupcount = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.setBackupcount = function (value) {
    return jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * repeated FileMember members = 11;
 * @return {!Array<!proto.space.FileMember>}
 */
proto.space.ListDirectoryEntry.prototype.getMembersList = function () {
    return /** @type{!Array<!proto.space.FileMember>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.FileMember, 11));
};
/**
 * @param {!Array<!proto.space.FileMember>} value
 * @return {!proto.space.ListDirectoryEntry} returns this
*/
proto.space.ListDirectoryEntry.prototype.setMembersList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 11, value);
};
/**
 * @param {!proto.space.FileMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.FileMember}
 */
proto.space.ListDirectoryEntry.prototype.addMembers = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.space.FileMember, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.ListDirectoryEntry} returns this
 */
proto.space.ListDirectoryEntry.prototype.clearMembersList = function () {
    return this.setMembersList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.SharedListDirectoryEntry.prototype.toObject = function (opt_includeInstance) {
        return proto.space.SharedListDirectoryEntry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.SharedListDirectoryEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.SharedListDirectoryEntry.toObject = function (includeInstance, msg) {
        var f, obj = {
            entry: (f = msg.getEntry()) && proto.space.ListDirectoryEntry.toObject(includeInstance, f),
            dbid: jspb.Message.getFieldWithDefault(msg, 2, ""),
            bucket: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.SharedListDirectoryEntry}
 */
proto.space.SharedListDirectoryEntry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.SharedListDirectoryEntry;
    return proto.space.SharedListDirectoryEntry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.SharedListDirectoryEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.SharedListDirectoryEntry}
 */
proto.space.SharedListDirectoryEntry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.ListDirectoryEntry;
                reader.readMessage(value, proto.space.ListDirectoryEntry.deserializeBinaryFromReader);
                msg.setEntry(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setDbid(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.SharedListDirectoryEntry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.SharedListDirectoryEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.SharedListDirectoryEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.SharedListDirectoryEntry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEntry();
    if (f != null) {
        writer.writeMessage(1, f, proto.space.ListDirectoryEntry.serializeBinaryToWriter);
    }
    f = message.getDbid();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional ListDirectoryEntry entry = 1;
 * @return {?proto.space.ListDirectoryEntry}
 */
proto.space.SharedListDirectoryEntry.prototype.getEntry = function () {
    return /** @type{?proto.space.ListDirectoryEntry} */ (jspb.Message.getWrapperField(this, proto.space.ListDirectoryEntry, 1));
};
/**
 * @param {?proto.space.ListDirectoryEntry|undefined} value
 * @return {!proto.space.SharedListDirectoryEntry} returns this
*/
proto.space.SharedListDirectoryEntry.prototype.setEntry = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.SharedListDirectoryEntry} returns this
 */
proto.space.SharedListDirectoryEntry.prototype.clearEntry = function () {
    return this.setEntry(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.SharedListDirectoryEntry.prototype.hasEntry = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string dbId = 2;
 * @return {string}
 */
proto.space.SharedListDirectoryEntry.prototype.getDbid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.SharedListDirectoryEntry} returns this
 */
proto.space.SharedListDirectoryEntry.prototype.setDbid = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string bucket = 3;
 * @return {string}
 */
proto.space.SharedListDirectoryEntry.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.SharedListDirectoryEntry} returns this
 */
proto.space.SharedListDirectoryEntry.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.ListDirectoriesResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ListDirectoriesResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ListDirectoriesResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ListDirectoriesResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ListDirectoriesResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.space.ListDirectoryEntry.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ListDirectoriesResponse}
 */
proto.space.ListDirectoriesResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ListDirectoriesResponse;
    return proto.space.ListDirectoriesResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ListDirectoriesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ListDirectoriesResponse}
 */
proto.space.ListDirectoriesResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.ListDirectoryEntry;
                reader.readMessage(value, proto.space.ListDirectoryEntry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ListDirectoriesResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ListDirectoriesResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ListDirectoriesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ListDirectoriesResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.space.ListDirectoryEntry.serializeBinaryToWriter);
    }
};
/**
 * repeated ListDirectoryEntry entries = 1;
 * @return {!Array<!proto.space.ListDirectoryEntry>}
 */
proto.space.ListDirectoriesResponse.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.space.ListDirectoryEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.ListDirectoryEntry, 1));
};
/**
 * @param {!Array<!proto.space.ListDirectoryEntry>} value
 * @return {!proto.space.ListDirectoriesResponse} returns this
*/
proto.space.ListDirectoriesResponse.prototype.setEntriesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.space.ListDirectoryEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.ListDirectoryEntry}
 */
proto.space.ListDirectoriesResponse.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.space.ListDirectoryEntry, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.ListDirectoriesResponse} returns this
 */
proto.space.ListDirectoriesResponse.prototype.clearEntriesList = function () {
    return this.setEntriesList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ListDirectoryRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ListDirectoryRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ListDirectoryRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ListDirectoryRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            path: jspb.Message.getFieldWithDefault(msg, 1, ""),
            bucket: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ListDirectoryRequest}
 */
proto.space.ListDirectoryRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ListDirectoryRequest;
    return proto.space.ListDirectoryRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ListDirectoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ListDirectoryRequest}
 */
proto.space.ListDirectoryRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ListDirectoryRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ListDirectoryRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ListDirectoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ListDirectoryRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string path = 1;
 * @return {string}
 */
proto.space.ListDirectoryRequest.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryRequest} returns this
 */
proto.space.ListDirectoryRequest.prototype.setPath = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string bucket = 2;
 * @return {string}
 */
proto.space.ListDirectoryRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ListDirectoryRequest} returns this
 */
proto.space.ListDirectoryRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.ListDirectoryResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ListDirectoryResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ListDirectoryResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ListDirectoryResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ListDirectoryResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.space.ListDirectoryEntry.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ListDirectoryResponse}
 */
proto.space.ListDirectoryResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ListDirectoryResponse;
    return proto.space.ListDirectoryResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ListDirectoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ListDirectoryResponse}
 */
proto.space.ListDirectoryResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.ListDirectoryEntry;
                reader.readMessage(value, proto.space.ListDirectoryEntry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ListDirectoryResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ListDirectoryResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ListDirectoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ListDirectoryResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.space.ListDirectoryEntry.serializeBinaryToWriter);
    }
};
/**
 * repeated ListDirectoryEntry entries = 1;
 * @return {!Array<!proto.space.ListDirectoryEntry>}
 */
proto.space.ListDirectoryResponse.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.space.ListDirectoryEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.ListDirectoryEntry, 1));
};
/**
 * @param {!Array<!proto.space.ListDirectoryEntry>} value
 * @return {!proto.space.ListDirectoryResponse} returns this
*/
proto.space.ListDirectoryResponse.prototype.setEntriesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.space.ListDirectoryEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.ListDirectoryEntry}
 */
proto.space.ListDirectoryResponse.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.space.ListDirectoryEntry, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.ListDirectoryResponse} returns this
 */
proto.space.ListDirectoryResponse.prototype.clearEntriesList = function () {
    return this.setEntriesList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.CreateBucketRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.CreateBucketRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.CreateBucketRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.CreateBucketRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            slug: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.CreateBucketRequest}
 */
proto.space.CreateBucketRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.CreateBucketRequest;
    return proto.space.CreateBucketRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.CreateBucketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.CreateBucketRequest}
 */
proto.space.CreateBucketRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSlug(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.CreateBucketRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.CreateBucketRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.CreateBucketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.CreateBucketRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSlug();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string slug = 1;
 * @return {string}
 */
proto.space.CreateBucketRequest.prototype.getSlug = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.CreateBucketRequest} returns this
 */
proto.space.CreateBucketRequest.prototype.setSlug = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.BucketMember.prototype.toObject = function (opt_includeInstance) {
        return proto.space.BucketMember.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.BucketMember} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.BucketMember.toObject = function (includeInstance, msg) {
        var f, obj = {
            address: jspb.Message.getFieldWithDefault(msg, 1, ""),
            publickey: jspb.Message.getFieldWithDefault(msg, 2, ""),
            isowner: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
            hasjoined: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.BucketMember}
 */
proto.space.BucketMember.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.BucketMember;
    return proto.space.BucketMember.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.BucketMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.BucketMember}
 */
proto.space.BucketMember.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPublickey(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsowner(value);
                break;
            case 4:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setHasjoined(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.BucketMember.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.BucketMember.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.BucketMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.BucketMember.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPublickey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getIsowner();
    if (f) {
        writer.writeBool(3, f);
    }
    f = message.getHasjoined();
    if (f) {
        writer.writeBool(4, f);
    }
};
/**
 * optional string address = 1;
 * @return {string}
 */
proto.space.BucketMember.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.BucketMember} returns this
 */
proto.space.BucketMember.prototype.setAddress = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string publicKey = 2;
 * @return {string}
 */
proto.space.BucketMember.prototype.getPublickey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.BucketMember} returns this
 */
proto.space.BucketMember.prototype.setPublickey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional bool isOwner = 3;
 * @return {boolean}
 */
proto.space.BucketMember.prototype.getIsowner = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.BucketMember} returns this
 */
proto.space.BucketMember.prototype.setIsowner = function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};
/**
 * optional bool hasJoined = 4;
 * @return {boolean}
 */
proto.space.BucketMember.prototype.getHasjoined = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.BucketMember} returns this
 */
proto.space.BucketMember.prototype.setHasjoined = function (value) {
    return jspb.Message.setProto3BooleanField(this, 4, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.Bucket.repeatedFields_ = [6];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.Bucket.prototype.toObject = function (opt_includeInstance) {
        return proto.space.Bucket.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.Bucket} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.Bucket.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            path: jspb.Message.getFieldWithDefault(msg, 3, ""),
            createdat: jspb.Message.getFieldWithDefault(msg, 4, 0),
            updatedat: jspb.Message.getFieldWithDefault(msg, 5, 0),
            membersList: jspb.Message.toObjectList(msg.getMembersList(), proto.space.BucketMember.toObject, includeInstance),
            ispersonalbucket: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
            isbackupenabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.Bucket}
 */
proto.space.Bucket.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.Bucket;
    return proto.space.Bucket.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.Bucket}
 */
proto.space.Bucket.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setCreatedat(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setUpdatedat(value);
                break;
            case 6:
                var value = new proto.space.BucketMember;
                reader.readMessage(value, proto.space.BucketMember.deserializeBinaryFromReader);
                msg.addMembers(value);
                break;
            case 7:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIspersonalbucket(value);
                break;
            case 8:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setIsbackupenabled(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.Bucket.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.Bucket.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.Bucket.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getCreatedat();
    if (f !== 0) {
        writer.writeInt64(4, f);
    }
    f = message.getUpdatedat();
    if (f !== 0) {
        writer.writeInt64(5, f);
    }
    f = message.getMembersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(6, f, proto.space.BucketMember.serializeBinaryToWriter);
    }
    f = message.getIspersonalbucket();
    if (f) {
        writer.writeBool(7, f);
    }
    f = message.getIsbackupenabled();
    if (f) {
        writer.writeBool(8, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.space.Bucket.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.space.Bucket.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string path = 3;
 * @return {string}
 */
proto.space.Bucket.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.setPath = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional int64 createdAt = 4;
 * @return {number}
 */
proto.space.Bucket.prototype.getCreatedat = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.setCreatedat = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional int64 updatedAt = 5;
 * @return {number}
 */
proto.space.Bucket.prototype.getUpdatedat = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.setUpdatedat = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * repeated BucketMember members = 6;
 * @return {!Array<!proto.space.BucketMember>}
 */
proto.space.Bucket.prototype.getMembersList = function () {
    return /** @type{!Array<!proto.space.BucketMember>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.BucketMember, 6));
};
/**
 * @param {!Array<!proto.space.BucketMember>} value
 * @return {!proto.space.Bucket} returns this
*/
proto.space.Bucket.prototype.setMembersList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 6, value);
};
/**
 * @param {!proto.space.BucketMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.BucketMember}
 */
proto.space.Bucket.prototype.addMembers = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.space.BucketMember, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.clearMembersList = function () {
    return this.setMembersList([]);
};
/**
 * optional bool isPersonalBucket = 7;
 * @return {boolean}
 */
proto.space.Bucket.prototype.getIspersonalbucket = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.setIspersonalbucket = function (value) {
    return jspb.Message.setProto3BooleanField(this, 7, value);
};
/**
 * optional bool isBackupEnabled = 8;
 * @return {boolean}
 */
proto.space.Bucket.prototype.getIsbackupenabled = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.Bucket} returns this
 */
proto.space.Bucket.prototype.setIsbackupenabled = function (value) {
    return jspb.Message.setProto3BooleanField(this, 8, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.CreateBucketResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.CreateBucketResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.CreateBucketResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.CreateBucketResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucket: (f = msg.getBucket()) && proto.space.Bucket.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.CreateBucketResponse}
 */
proto.space.CreateBucketResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.CreateBucketResponse;
    return proto.space.CreateBucketResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.CreateBucketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.CreateBucketResponse}
 */
proto.space.CreateBucketResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.Bucket;
                reader.readMessage(value, proto.space.Bucket.deserializeBinaryFromReader);
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.CreateBucketResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.CreateBucketResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.CreateBucketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.CreateBucketResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucket();
    if (f != null) {
        writer.writeMessage(1, f, proto.space.Bucket.serializeBinaryToWriter);
    }
};
/**
 * optional Bucket bucket = 1;
 * @return {?proto.space.Bucket}
 */
proto.space.CreateBucketResponse.prototype.getBucket = function () {
    return /** @type{?proto.space.Bucket} */ (jspb.Message.getWrapperField(this, proto.space.Bucket, 1));
};
/**
 * @param {?proto.space.Bucket|undefined} value
 * @return {!proto.space.CreateBucketResponse} returns this
*/
proto.space.CreateBucketResponse.prototype.setBucket = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.CreateBucketResponse} returns this
 */
proto.space.CreateBucketResponse.prototype.clearBucket = function () {
    return this.setBucket(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.CreateBucketResponse.prototype.hasBucket = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GenerateKeyPairRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GenerateKeyPairRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GenerateKeyPairRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GenerateKeyPairRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GenerateKeyPairRequest}
 */
proto.space.GenerateKeyPairRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GenerateKeyPairRequest;
    return proto.space.GenerateKeyPairRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GenerateKeyPairRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GenerateKeyPairRequest}
 */
proto.space.GenerateKeyPairRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GenerateKeyPairRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GenerateKeyPairRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GenerateKeyPairRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GenerateKeyPairRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GenerateKeyPairResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GenerateKeyPairResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GenerateKeyPairResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GenerateKeyPairResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            mnemonic: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GenerateKeyPairResponse}
 */
proto.space.GenerateKeyPairResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GenerateKeyPairResponse;
    return proto.space.GenerateKeyPairResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GenerateKeyPairResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GenerateKeyPairResponse}
 */
proto.space.GenerateKeyPairResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setMnemonic(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GenerateKeyPairResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GenerateKeyPairResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GenerateKeyPairResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GenerateKeyPairResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMnemonic();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string mnemonic = 1;
 * @return {string}
 */
proto.space.GenerateKeyPairResponse.prototype.getMnemonic = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GenerateKeyPairResponse} returns this
 */
proto.space.GenerateKeyPairResponse.prototype.setMnemonic = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetStoredMnemonicRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetStoredMnemonicRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetStoredMnemonicRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetStoredMnemonicRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetStoredMnemonicRequest}
 */
proto.space.GetStoredMnemonicRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetStoredMnemonicRequest;
    return proto.space.GetStoredMnemonicRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetStoredMnemonicRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetStoredMnemonicRequest}
 */
proto.space.GetStoredMnemonicRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetStoredMnemonicRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetStoredMnemonicRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetStoredMnemonicRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetStoredMnemonicRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetStoredMnemonicResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetStoredMnemonicResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetStoredMnemonicResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetStoredMnemonicResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            mnemonic: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetStoredMnemonicResponse}
 */
proto.space.GetStoredMnemonicResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetStoredMnemonicResponse;
    return proto.space.GetStoredMnemonicResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetStoredMnemonicResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetStoredMnemonicResponse}
 */
proto.space.GetStoredMnemonicResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setMnemonic(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetStoredMnemonicResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetStoredMnemonicResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetStoredMnemonicResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetStoredMnemonicResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMnemonic();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string mnemonic = 1;
 * @return {string}
 */
proto.space.GetStoredMnemonicResponse.prototype.getMnemonic = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetStoredMnemonicResponse} returns this
 */
proto.space.GetStoredMnemonicResponse.prototype.setMnemonic = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.RestoreKeyPairViaMnemonicRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.RestoreKeyPairViaMnemonicRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.RestoreKeyPairViaMnemonicRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.RestoreKeyPairViaMnemonicRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            mnemonic: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.RestoreKeyPairViaMnemonicRequest}
 */
proto.space.RestoreKeyPairViaMnemonicRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.RestoreKeyPairViaMnemonicRequest;
    return proto.space.RestoreKeyPairViaMnemonicRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.RestoreKeyPairViaMnemonicRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.RestoreKeyPairViaMnemonicRequest}
 */
proto.space.RestoreKeyPairViaMnemonicRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setMnemonic(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.RestoreKeyPairViaMnemonicRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.RestoreKeyPairViaMnemonicRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.RestoreKeyPairViaMnemonicRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.RestoreKeyPairViaMnemonicRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMnemonic();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string mnemonic = 1;
 * @return {string}
 */
proto.space.RestoreKeyPairViaMnemonicRequest.prototype.getMnemonic = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.RestoreKeyPairViaMnemonicRequest} returns this
 */
proto.space.RestoreKeyPairViaMnemonicRequest.prototype.setMnemonic = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.RestoreKeyPairViaMnemonicResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.RestoreKeyPairViaMnemonicResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.RestoreKeyPairViaMnemonicResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.RestoreKeyPairViaMnemonicResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.RestoreKeyPairViaMnemonicResponse}
 */
proto.space.RestoreKeyPairViaMnemonicResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.RestoreKeyPairViaMnemonicResponse;
    return proto.space.RestoreKeyPairViaMnemonicResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.RestoreKeyPairViaMnemonicResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.RestoreKeyPairViaMnemonicResponse}
 */
proto.space.RestoreKeyPairViaMnemonicResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.RestoreKeyPairViaMnemonicResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.RestoreKeyPairViaMnemonicResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.RestoreKeyPairViaMnemonicResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.RestoreKeyPairViaMnemonicResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.FileEventResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.FileEventResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.FileEventResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.FileEventResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            type: jspb.Message.getFieldWithDefault(msg, 1, 0),
            entry: (f = msg.getEntry()) && proto.space.ListDirectoryEntry.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.FileEventResponse}
 */
proto.space.FileEventResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.FileEventResponse;
    return proto.space.FileEventResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.FileEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.FileEventResponse}
 */
proto.space.FileEventResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.space.EventType} */ (reader.readEnum());
                msg.setType(value);
                break;
            case 2:
                var value = new proto.space.ListDirectoryEntry;
                reader.readMessage(value, proto.space.ListDirectoryEntry.deserializeBinaryFromReader);
                msg.setEntry(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.FileEventResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.FileEventResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.FileEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.FileEventResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getType();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getEntry();
    if (f != null) {
        writer.writeMessage(2, f, proto.space.ListDirectoryEntry.serializeBinaryToWriter);
    }
};
/**
 * optional EventType type = 1;
 * @return {!proto.space.EventType}
 */
proto.space.FileEventResponse.prototype.getType = function () {
    return /** @type {!proto.space.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {!proto.space.EventType} value
 * @return {!proto.space.FileEventResponse} returns this
 */
proto.space.FileEventResponse.prototype.setType = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional ListDirectoryEntry entry = 2;
 * @return {?proto.space.ListDirectoryEntry}
 */
proto.space.FileEventResponse.prototype.getEntry = function () {
    return /** @type{?proto.space.ListDirectoryEntry} */ (jspb.Message.getWrapperField(this, proto.space.ListDirectoryEntry, 2));
};
/**
 * @param {?proto.space.ListDirectoryEntry|undefined} value
 * @return {!proto.space.FileEventResponse} returns this
*/
proto.space.FileEventResponse.prototype.setEntry = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.FileEventResponse} returns this
 */
proto.space.FileEventResponse.prototype.clearEntry = function () {
    return this.setEntry(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.FileEventResponse.prototype.hasEntry = function () {
    return jspb.Message.getField(this, 2) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.FileInfoEventResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.FileInfoEventResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.FileInfoEventResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.FileInfoEventResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            file: (f = msg.getFile()) && proto.space.ListDirectoryEntry.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.FileInfoEventResponse}
 */
proto.space.FileInfoEventResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.FileInfoEventResponse;
    return proto.space.FileInfoEventResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.FileInfoEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.FileInfoEventResponse}
 */
proto.space.FileInfoEventResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.ListDirectoryEntry;
                reader.readMessage(value, proto.space.ListDirectoryEntry.deserializeBinaryFromReader);
                msg.setFile(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.FileInfoEventResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.FileInfoEventResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.FileInfoEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.FileInfoEventResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFile();
    if (f != null) {
        writer.writeMessage(1, f, proto.space.ListDirectoryEntry.serializeBinaryToWriter);
    }
};
/**
 * optional ListDirectoryEntry file = 1;
 * @return {?proto.space.ListDirectoryEntry}
 */
proto.space.FileInfoEventResponse.prototype.getFile = function () {
    return /** @type{?proto.space.ListDirectoryEntry} */ (jspb.Message.getWrapperField(this, proto.space.ListDirectoryEntry, 1));
};
/**
 * @param {?proto.space.ListDirectoryEntry|undefined} value
 * @return {!proto.space.FileInfoEventResponse} returns this
*/
proto.space.FileInfoEventResponse.prototype.setFile = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.FileInfoEventResponse} returns this
 */
proto.space.FileInfoEventResponse.prototype.clearFile = function () {
    return this.setFile(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.FileInfoEventResponse.prototype.hasFile = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.TextileEventResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.TextileEventResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.TextileEventResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.TextileEventResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucket: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.TextileEventResponse}
 */
proto.space.TextileEventResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.TextileEventResponse;
    return proto.space.TextileEventResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.TextileEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.TextileEventResponse}
 */
proto.space.TextileEventResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.TextileEventResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.TextileEventResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.TextileEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.TextileEventResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string bucket = 1;
 * @return {string}
 */
proto.space.TextileEventResponse.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.TextileEventResponse} returns this
 */
proto.space.TextileEventResponse.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.OpenFileRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.OpenFileRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.OpenFileRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.OpenFileRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            path: jspb.Message.getFieldWithDefault(msg, 1, ""),
            bucket: jspb.Message.getFieldWithDefault(msg, 2, ""),
            dbid: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.OpenFileRequest}
 */
proto.space.OpenFileRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.OpenFileRequest;
    return proto.space.OpenFileRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.OpenFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.OpenFileRequest}
 */
proto.space.OpenFileRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setDbid(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.OpenFileRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.OpenFileRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.OpenFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.OpenFileRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getDbid();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string path = 1;
 * @return {string}
 */
proto.space.OpenFileRequest.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenFileRequest} returns this
 */
proto.space.OpenFileRequest.prototype.setPath = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string bucket = 2;
 * @return {string}
 */
proto.space.OpenFileRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenFileRequest} returns this
 */
proto.space.OpenFileRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string dbId = 3;
 * @return {string}
 */
proto.space.OpenFileRequest.prototype.getDbid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenFileRequest} returns this
 */
proto.space.OpenFileRequest.prototype.setDbid = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.OpenFileResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.OpenFileResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.OpenFileResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.OpenFileResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            location: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.OpenFileResponse}
 */
proto.space.OpenFileResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.OpenFileResponse;
    return proto.space.OpenFileResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.OpenFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.OpenFileResponse}
 */
proto.space.OpenFileResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLocation(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.OpenFileResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.OpenFileResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.OpenFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.OpenFileResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLocation();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string location = 1;
 * @return {string}
 */
proto.space.OpenFileResponse.prototype.getLocation = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenFileResponse} returns this
 */
proto.space.OpenFileResponse.prototype.setLocation = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.OpenPublicFileRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.OpenPublicFileRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.OpenPublicFileRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.OpenPublicFileRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            filecid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            filekey: jspb.Message.getFieldWithDefault(msg, 2, ""),
            filename: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.OpenPublicFileRequest}
 */
proto.space.OpenPublicFileRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.OpenPublicFileRequest;
    return proto.space.OpenPublicFileRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.OpenPublicFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.OpenPublicFileRequest}
 */
proto.space.OpenPublicFileRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFilecid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setFilekey(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setFilename(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.OpenPublicFileRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.OpenPublicFileRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.OpenPublicFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.OpenPublicFileRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFilecid();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getFilekey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getFilename();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string fileCid = 1;
 * @return {string}
 */
proto.space.OpenPublicFileRequest.prototype.getFilecid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenPublicFileRequest} returns this
 */
proto.space.OpenPublicFileRequest.prototype.setFilecid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string fileKey = 2;
 * @return {string}
 */
proto.space.OpenPublicFileRequest.prototype.getFilekey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenPublicFileRequest} returns this
 */
proto.space.OpenPublicFileRequest.prototype.setFilekey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string filename = 3;
 * @return {string}
 */
proto.space.OpenPublicFileRequest.prototype.getFilename = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenPublicFileRequest} returns this
 */
proto.space.OpenPublicFileRequest.prototype.setFilename = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.OpenPublicFileResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.OpenPublicFileResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.OpenPublicFileResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.OpenPublicFileResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            location: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.OpenPublicFileResponse}
 */
proto.space.OpenPublicFileResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.OpenPublicFileResponse;
    return proto.space.OpenPublicFileResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.OpenPublicFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.OpenPublicFileResponse}
 */
proto.space.OpenPublicFileResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLocation(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.OpenPublicFileResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.OpenPublicFileResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.OpenPublicFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.OpenPublicFileResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLocation();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string location = 1;
 * @return {string}
 */
proto.space.OpenPublicFileResponse.prototype.getLocation = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.OpenPublicFileResponse} returns this
 */
proto.space.OpenPublicFileResponse.prototype.setLocation = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.AddItemsRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.AddItemsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.AddItemsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.AddItemsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.AddItemsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            sourcepathsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
            targetpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
            bucket: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.AddItemsRequest}
 */
proto.space.AddItemsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.AddItemsRequest;
    return proto.space.AddItemsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.AddItemsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.AddItemsRequest}
 */
proto.space.AddItemsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addSourcepaths(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTargetpath(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.AddItemsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.AddItemsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.AddItemsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.AddItemsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSourcepathsList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = message.getTargetpath();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * repeated string sourcePaths = 1;
 * @return {!Array<string>}
 */
proto.space.AddItemsRequest.prototype.getSourcepathsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.space.AddItemsRequest} returns this
 */
proto.space.AddItemsRequest.prototype.setSourcepathsList = function (value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.space.AddItemsRequest} returns this
 */
proto.space.AddItemsRequest.prototype.addSourcepaths = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.AddItemsRequest} returns this
 */
proto.space.AddItemsRequest.prototype.clearSourcepathsList = function () {
    return this.setSourcepathsList([]);
};
/**
 * optional string targetPath = 2;
 * @return {string}
 */
proto.space.AddItemsRequest.prototype.getTargetpath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.AddItemsRequest} returns this
 */
proto.space.AddItemsRequest.prototype.setTargetpath = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string bucket = 3;
 * @return {string}
 */
proto.space.AddItemsRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.AddItemsRequest} returns this
 */
proto.space.AddItemsRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.AddItemResult.prototype.toObject = function (opt_includeInstance) {
        return proto.space.AddItemResult.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.AddItemResult} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.AddItemResult.toObject = function (includeInstance, msg) {
        var f, obj = {
            sourcepath: jspb.Message.getFieldWithDefault(msg, 1, ""),
            bucketpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
            error: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.AddItemResult}
 */
proto.space.AddItemResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.AddItemResult;
    return proto.space.AddItemResult.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.AddItemResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.AddItemResult}
 */
proto.space.AddItemResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSourcepath(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucketpath(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setError(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.AddItemResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.AddItemResult.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.AddItemResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.AddItemResult.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSourcepath();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getBucketpath();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getError();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string sourcePath = 1;
 * @return {string}
 */
proto.space.AddItemResult.prototype.getSourcepath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.AddItemResult} returns this
 */
proto.space.AddItemResult.prototype.setSourcepath = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string bucketPath = 2;
 * @return {string}
 */
proto.space.AddItemResult.prototype.getBucketpath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.AddItemResult} returns this
 */
proto.space.AddItemResult.prototype.setBucketpath = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string error = 3;
 * @return {string}
 */
proto.space.AddItemResult.prototype.getError = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.AddItemResult} returns this
 */
proto.space.AddItemResult.prototype.setError = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.AddItemsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.AddItemsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.AddItemsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.AddItemsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: (f = msg.getResult()) && proto.space.AddItemResult.toObject(includeInstance, f),
            totalfiles: jspb.Message.getFieldWithDefault(msg, 2, 0),
            totalbytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
            completedfiles: jspb.Message.getFieldWithDefault(msg, 4, 0),
            completedbytes: jspb.Message.getFieldWithDefault(msg, 5, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.AddItemsResponse}
 */
proto.space.AddItemsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.AddItemsResponse;
    return proto.space.AddItemsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.AddItemsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.AddItemsResponse}
 */
proto.space.AddItemsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.AddItemResult;
                reader.readMessage(value, proto.space.AddItemResult.deserializeBinaryFromReader);
                msg.setResult(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTotalfiles(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTotalbytes(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setCompletedfiles(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setCompletedbytes(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.AddItemsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.AddItemsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.AddItemsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.AddItemsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f != null) {
        writer.writeMessage(1, f, proto.space.AddItemResult.serializeBinaryToWriter);
    }
    f = message.getTotalfiles();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
    f = message.getTotalbytes();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
    f = message.getCompletedfiles();
    if (f !== 0) {
        writer.writeInt64(4, f);
    }
    f = message.getCompletedbytes();
    if (f !== 0) {
        writer.writeInt64(5, f);
    }
};
/**
 * optional AddItemResult result = 1;
 * @return {?proto.space.AddItemResult}
 */
proto.space.AddItemsResponse.prototype.getResult = function () {
    return /** @type{?proto.space.AddItemResult} */ (jspb.Message.getWrapperField(this, proto.space.AddItemResult, 1));
};
/**
 * @param {?proto.space.AddItemResult|undefined} value
 * @return {!proto.space.AddItemsResponse} returns this
*/
proto.space.AddItemsResponse.prototype.setResult = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.AddItemsResponse} returns this
 */
proto.space.AddItemsResponse.prototype.clearResult = function () {
    return this.setResult(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.AddItemsResponse.prototype.hasResult = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional int64 totalFiles = 2;
 * @return {number}
 */
proto.space.AddItemsResponse.prototype.getTotalfiles = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.AddItemsResponse} returns this
 */
proto.space.AddItemsResponse.prototype.setTotalfiles = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int64 totalBytes = 3;
 * @return {number}
 */
proto.space.AddItemsResponse.prototype.getTotalbytes = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.AddItemsResponse} returns this
 */
proto.space.AddItemsResponse.prototype.setTotalbytes = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int64 completedFiles = 4;
 * @return {number}
 */
proto.space.AddItemsResponse.prototype.getCompletedfiles = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.AddItemsResponse} returns this
 */
proto.space.AddItemsResponse.prototype.setCompletedfiles = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional int64 completedBytes = 5;
 * @return {number}
 */
proto.space.AddItemsResponse.prototype.getCompletedbytes = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.AddItemsResponse} returns this
 */
proto.space.AddItemsResponse.prototype.setCompletedbytes = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.CreateFolderRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.CreateFolderRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.CreateFolderRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.CreateFolderRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            path: jspb.Message.getFieldWithDefault(msg, 1, ""),
            bucket: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.CreateFolderRequest}
 */
proto.space.CreateFolderRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.CreateFolderRequest;
    return proto.space.CreateFolderRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.CreateFolderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.CreateFolderRequest}
 */
proto.space.CreateFolderRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.CreateFolderRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.CreateFolderRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.CreateFolderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.CreateFolderRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string path = 1;
 * @return {string}
 */
proto.space.CreateFolderRequest.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.CreateFolderRequest} returns this
 */
proto.space.CreateFolderRequest.prototype.setPath = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string bucket = 2;
 * @return {string}
 */
proto.space.CreateFolderRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.CreateFolderRequest} returns this
 */
proto.space.CreateFolderRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.CreateFolderResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.CreateFolderResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.CreateFolderResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.CreateFolderResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.CreateFolderResponse}
 */
proto.space.CreateFolderResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.CreateFolderResponse;
    return proto.space.CreateFolderResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.CreateFolderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.CreateFolderResponse}
 */
proto.space.CreateFolderResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.CreateFolderResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.CreateFolderResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.CreateFolderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.CreateFolderResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.BackupKeysByPassphraseRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.BackupKeysByPassphraseRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.BackupKeysByPassphraseRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.BackupKeysByPassphraseRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            passphrase: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.BackupKeysByPassphraseRequest}
 */
proto.space.BackupKeysByPassphraseRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.BackupKeysByPassphraseRequest;
    return proto.space.BackupKeysByPassphraseRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.BackupKeysByPassphraseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.BackupKeysByPassphraseRequest}
 */
proto.space.BackupKeysByPassphraseRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUuid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassphrase(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.BackupKeysByPassphraseRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.BackupKeysByPassphraseRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.BackupKeysByPassphraseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.BackupKeysByPassphraseRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUuid();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPassphrase();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.space.BackupKeysByPassphraseRequest.prototype.getUuid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.BackupKeysByPassphraseRequest} returns this
 */
proto.space.BackupKeysByPassphraseRequest.prototype.setUuid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string passphrase = 2;
 * @return {string}
 */
proto.space.BackupKeysByPassphraseRequest.prototype.getPassphrase = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.BackupKeysByPassphraseRequest} returns this
 */
proto.space.BackupKeysByPassphraseRequest.prototype.setPassphrase = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.BackupKeysByPassphraseResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.BackupKeysByPassphraseResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.BackupKeysByPassphraseResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.BackupKeysByPassphraseResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.BackupKeysByPassphraseResponse}
 */
proto.space.BackupKeysByPassphraseResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.BackupKeysByPassphraseResponse;
    return proto.space.BackupKeysByPassphraseResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.BackupKeysByPassphraseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.BackupKeysByPassphraseResponse}
 */
proto.space.BackupKeysByPassphraseResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.BackupKeysByPassphraseResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.BackupKeysByPassphraseResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.BackupKeysByPassphraseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.BackupKeysByPassphraseResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.RecoverKeysByPassphraseRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.RecoverKeysByPassphraseRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.RecoverKeysByPassphraseRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.RecoverKeysByPassphraseRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            passphrase: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.RecoverKeysByPassphraseRequest}
 */
proto.space.RecoverKeysByPassphraseRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.RecoverKeysByPassphraseRequest;
    return proto.space.RecoverKeysByPassphraseRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.RecoverKeysByPassphraseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.RecoverKeysByPassphraseRequest}
 */
proto.space.RecoverKeysByPassphraseRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUuid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassphrase(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.RecoverKeysByPassphraseRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.RecoverKeysByPassphraseRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.RecoverKeysByPassphraseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.RecoverKeysByPassphraseRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUuid();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPassphrase();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.space.RecoverKeysByPassphraseRequest.prototype.getUuid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.RecoverKeysByPassphraseRequest} returns this
 */
proto.space.RecoverKeysByPassphraseRequest.prototype.setUuid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string passphrase = 2;
 * @return {string}
 */
proto.space.RecoverKeysByPassphraseRequest.prototype.getPassphrase = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.RecoverKeysByPassphraseRequest} returns this
 */
proto.space.RecoverKeysByPassphraseRequest.prototype.setPassphrase = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.RecoverKeysByPassphraseResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.RecoverKeysByPassphraseResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.RecoverKeysByPassphraseResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.RecoverKeysByPassphraseResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.RecoverKeysByPassphraseResponse}
 */
proto.space.RecoverKeysByPassphraseResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.RecoverKeysByPassphraseResponse;
    return proto.space.RecoverKeysByPassphraseResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.RecoverKeysByPassphraseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.RecoverKeysByPassphraseResponse}
 */
proto.space.RecoverKeysByPassphraseResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.RecoverKeysByPassphraseResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.RecoverKeysByPassphraseResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.RecoverKeysByPassphraseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.RecoverKeysByPassphraseResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.TestKeysPassphraseRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.TestKeysPassphraseRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.TestKeysPassphraseRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.TestKeysPassphraseRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            passphrase: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.TestKeysPassphraseRequest}
 */
proto.space.TestKeysPassphraseRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.TestKeysPassphraseRequest;
    return proto.space.TestKeysPassphraseRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.TestKeysPassphraseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.TestKeysPassphraseRequest}
 */
proto.space.TestKeysPassphraseRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUuid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassphrase(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.TestKeysPassphraseRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.TestKeysPassphraseRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.TestKeysPassphraseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.TestKeysPassphraseRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUuid();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPassphrase();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.space.TestKeysPassphraseRequest.prototype.getUuid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.TestKeysPassphraseRequest} returns this
 */
proto.space.TestKeysPassphraseRequest.prototype.setUuid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string passphrase = 2;
 * @return {string}
 */
proto.space.TestKeysPassphraseRequest.prototype.getPassphrase = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.TestKeysPassphraseRequest} returns this
 */
proto.space.TestKeysPassphraseRequest.prototype.setPassphrase = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.TestKeysPassphraseResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.TestKeysPassphraseResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.TestKeysPassphraseResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.TestKeysPassphraseResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.TestKeysPassphraseResponse}
 */
proto.space.TestKeysPassphraseResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.TestKeysPassphraseResponse;
    return proto.space.TestKeysPassphraseResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.TestKeysPassphraseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.TestKeysPassphraseResponse}
 */
proto.space.TestKeysPassphraseResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.TestKeysPassphraseResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.TestKeysPassphraseResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.TestKeysPassphraseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.TestKeysPassphraseResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.ThreadInfo.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ThreadInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ThreadInfo.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ThreadInfo} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ThreadInfo.toObject = function (includeInstance, msg) {
        var f, obj = {
            addressesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ThreadInfo}
 */
proto.space.ThreadInfo.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ThreadInfo;
    return proto.space.ThreadInfo.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ThreadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ThreadInfo}
 */
proto.space.ThreadInfo.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ThreadInfo.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ThreadInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ThreadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ThreadInfo.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * repeated string addresses = 1;
 * @return {!Array<string>}
 */
proto.space.ThreadInfo.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.space.ThreadInfo} returns this
 */
proto.space.ThreadInfo.prototype.setAddressesList = function (value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.space.ThreadInfo} returns this
 */
proto.space.ThreadInfo.prototype.addAddresses = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.ThreadInfo} returns this
 */
proto.space.ThreadInfo.prototype.clearAddressesList = function () {
    return this.setAddressesList([]);
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.space.ThreadInfo.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ThreadInfo} returns this
 */
proto.space.ThreadInfo.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ShareBucketRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ShareBucketRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ShareBucketRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ShareBucketRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucket: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ShareBucketRequest}
 */
proto.space.ShareBucketRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ShareBucketRequest;
    return proto.space.ShareBucketRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ShareBucketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ShareBucketRequest}
 */
proto.space.ShareBucketRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ShareBucketRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ShareBucketRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ShareBucketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ShareBucketRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string bucket = 1;
 * @return {string}
 */
proto.space.ShareBucketRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ShareBucketRequest} returns this
 */
proto.space.ShareBucketRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ShareBucketResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ShareBucketResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ShareBucketResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ShareBucketResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadinfo: (f = msg.getThreadinfo()) && proto.space.ThreadInfo.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ShareBucketResponse}
 */
proto.space.ShareBucketResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ShareBucketResponse;
    return proto.space.ShareBucketResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ShareBucketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ShareBucketResponse}
 */
proto.space.ShareBucketResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.ThreadInfo;
                reader.readMessage(value, proto.space.ThreadInfo.deserializeBinaryFromReader);
                msg.setThreadinfo(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ShareBucketResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ShareBucketResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ShareBucketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ShareBucketResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadinfo();
    if (f != null) {
        writer.writeMessage(1, f, proto.space.ThreadInfo.serializeBinaryToWriter);
    }
};
/**
 * optional ThreadInfo threadinfo = 1;
 * @return {?proto.space.ThreadInfo}
 */
proto.space.ShareBucketResponse.prototype.getThreadinfo = function () {
    return /** @type{?proto.space.ThreadInfo} */ (jspb.Message.getWrapperField(this, proto.space.ThreadInfo, 1));
};
/**
 * @param {?proto.space.ThreadInfo|undefined} value
 * @return {!proto.space.ShareBucketResponse} returns this
*/
proto.space.ShareBucketResponse.prototype.setThreadinfo = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.ShareBucketResponse} returns this
 */
proto.space.ShareBucketResponse.prototype.clearThreadinfo = function () {
    return this.setThreadinfo(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.ShareBucketResponse.prototype.hasThreadinfo = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.JoinBucketRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.JoinBucketRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.JoinBucketRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.JoinBucketRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadinfo: (f = msg.getThreadinfo()) && proto.space.ThreadInfo.toObject(includeInstance, f),
            bucket: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.JoinBucketRequest}
 */
proto.space.JoinBucketRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.JoinBucketRequest;
    return proto.space.JoinBucketRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.JoinBucketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.JoinBucketRequest}
 */
proto.space.JoinBucketRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.ThreadInfo;
                reader.readMessage(value, proto.space.ThreadInfo.deserializeBinaryFromReader);
                msg.setThreadinfo(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.JoinBucketRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.JoinBucketRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.JoinBucketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.JoinBucketRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadinfo();
    if (f != null) {
        writer.writeMessage(1, f, proto.space.ThreadInfo.serializeBinaryToWriter);
    }
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional ThreadInfo threadinfo = 1;
 * @return {?proto.space.ThreadInfo}
 */
proto.space.JoinBucketRequest.prototype.getThreadinfo = function () {
    return /** @type{?proto.space.ThreadInfo} */ (jspb.Message.getWrapperField(this, proto.space.ThreadInfo, 1));
};
/**
 * @param {?proto.space.ThreadInfo|undefined} value
 * @return {!proto.space.JoinBucketRequest} returns this
*/
proto.space.JoinBucketRequest.prototype.setThreadinfo = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.JoinBucketRequest} returns this
 */
proto.space.JoinBucketRequest.prototype.clearThreadinfo = function () {
    return this.setThreadinfo(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.JoinBucketRequest.prototype.hasThreadinfo = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string bucket = 2;
 * @return {string}
 */
proto.space.JoinBucketRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.JoinBucketRequest} returns this
 */
proto.space.JoinBucketRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.JoinBucketResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.JoinBucketResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.JoinBucketResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.JoinBucketResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.JoinBucketResponse}
 */
proto.space.JoinBucketResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.JoinBucketResponse;
    return proto.space.JoinBucketResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.JoinBucketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.JoinBucketResponse}
 */
proto.space.JoinBucketResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setResult(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.JoinBucketResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.JoinBucketResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.JoinBucketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.JoinBucketResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f) {
        writer.writeBool(1, f);
    }
};
/**
 * optional bool result = 1;
 * @return {boolean}
 */
proto.space.JoinBucketResponse.prototype.getResult = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.JoinBucketResponse} returns this
 */
proto.space.JoinBucketResponse.prototype.setResult = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.ShareFilesViaPublicKeyRequest.repeatedFields_ = [1, 2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ShareFilesViaPublicKeyRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ShareFilesViaPublicKeyRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ShareFilesViaPublicKeyRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ShareFilesViaPublicKeyRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            publickeysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
            pathsList: jspb.Message.toObjectList(msg.getPathsList(), proto.space.FullPath.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ShareFilesViaPublicKeyRequest}
 */
proto.space.ShareFilesViaPublicKeyRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ShareFilesViaPublicKeyRequest;
    return proto.space.ShareFilesViaPublicKeyRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ShareFilesViaPublicKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ShareFilesViaPublicKeyRequest}
 */
proto.space.ShareFilesViaPublicKeyRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addPublickeys(value);
                break;
            case 2:
                var value = new proto.space.FullPath;
                reader.readMessage(value, proto.space.FullPath.deserializeBinaryFromReader);
                msg.addPaths(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ShareFilesViaPublicKeyRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ShareFilesViaPublicKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ShareFilesViaPublicKeyRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPublickeysList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = message.getPathsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.space.FullPath.serializeBinaryToWriter);
    }
};
/**
 * repeated string publicKeys = 1;
 * @return {!Array<string>}
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.getPublickeysList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.space.ShareFilesViaPublicKeyRequest} returns this
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.setPublickeysList = function (value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.space.ShareFilesViaPublicKeyRequest} returns this
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.addPublickeys = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.ShareFilesViaPublicKeyRequest} returns this
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.clearPublickeysList = function () {
    return this.setPublickeysList([]);
};
/**
 * repeated FullPath paths = 2;
 * @return {!Array<!proto.space.FullPath>}
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.getPathsList = function () {
    return /** @type{!Array<!proto.space.FullPath>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.FullPath, 2));
};
/**
 * @param {!Array<!proto.space.FullPath>} value
 * @return {!proto.space.ShareFilesViaPublicKeyRequest} returns this
*/
proto.space.ShareFilesViaPublicKeyRequest.prototype.setPathsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.space.FullPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.FullPath}
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.addPaths = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.space.FullPath, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.ShareFilesViaPublicKeyRequest} returns this
 */
proto.space.ShareFilesViaPublicKeyRequest.prototype.clearPathsList = function () {
    return this.setPathsList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.FullPath.prototype.toObject = function (opt_includeInstance) {
        return proto.space.FullPath.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.FullPath} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.FullPath.toObject = function (includeInstance, msg) {
        var f, obj = {
            dbid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            bucket: jspb.Message.getFieldWithDefault(msg, 2, ""),
            path: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.FullPath}
 */
proto.space.FullPath.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.FullPath;
    return proto.space.FullPath.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.FullPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.FullPath}
 */
proto.space.FullPath.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setDbid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.FullPath.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.FullPath.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.FullPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.FullPath.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getDbid();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string dbId = 1;
 * @return {string}
 */
proto.space.FullPath.prototype.getDbid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.FullPath} returns this
 */
proto.space.FullPath.prototype.setDbid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string bucket = 2;
 * @return {string}
 */
proto.space.FullPath.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.FullPath} returns this
 */
proto.space.FullPath.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string path = 3;
 * @return {string}
 */
proto.space.FullPath.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.FullPath} returns this
 */
proto.space.FullPath.prototype.setPath = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ShareFilesViaPublicKeyResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ShareFilesViaPublicKeyResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ShareFilesViaPublicKeyResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ShareFilesViaPublicKeyResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ShareFilesViaPublicKeyResponse}
 */
proto.space.ShareFilesViaPublicKeyResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ShareFilesViaPublicKeyResponse;
    return proto.space.ShareFilesViaPublicKeyResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ShareFilesViaPublicKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ShareFilesViaPublicKeyResponse}
 */
proto.space.ShareFilesViaPublicKeyResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ShareFilesViaPublicKeyResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ShareFilesViaPublicKeyResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ShareFilesViaPublicKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ShareFilesViaPublicKeyResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.GeneratePublicFileLinkRequest.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GeneratePublicFileLinkRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GeneratePublicFileLinkRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GeneratePublicFileLinkRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GeneratePublicFileLinkRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucket: jspb.Message.getFieldWithDefault(msg, 1, ""),
            itempathsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
            password: jspb.Message.getFieldWithDefault(msg, 3, ""),
            dbid: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GeneratePublicFileLinkRequest}
 */
proto.space.GeneratePublicFileLinkRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GeneratePublicFileLinkRequest;
    return proto.space.GeneratePublicFileLinkRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GeneratePublicFileLinkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GeneratePublicFileLinkRequest}
 */
proto.space.GeneratePublicFileLinkRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBucket(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addItempaths(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setDbid(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GeneratePublicFileLinkRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GeneratePublicFileLinkRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GeneratePublicFileLinkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GeneratePublicFileLinkRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucket();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getItempathsList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getDbid();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional string bucket = 1;
 * @return {string}
 */
proto.space.GeneratePublicFileLinkRequest.prototype.getBucket = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GeneratePublicFileLinkRequest} returns this
 */
proto.space.GeneratePublicFileLinkRequest.prototype.setBucket = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated string itemPaths = 2;
 * @return {!Array<string>}
 */
proto.space.GeneratePublicFileLinkRequest.prototype.getItempathsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.space.GeneratePublicFileLinkRequest} returns this
 */
proto.space.GeneratePublicFileLinkRequest.prototype.setItempathsList = function (value) {
    return jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.space.GeneratePublicFileLinkRequest} returns this
 */
proto.space.GeneratePublicFileLinkRequest.prototype.addItempaths = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.GeneratePublicFileLinkRequest} returns this
 */
proto.space.GeneratePublicFileLinkRequest.prototype.clearItempathsList = function () {
    return this.setItempathsList([]);
};
/**
 * optional string password = 3;
 * @return {string}
 */
proto.space.GeneratePublicFileLinkRequest.prototype.getPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GeneratePublicFileLinkRequest} returns this
 */
proto.space.GeneratePublicFileLinkRequest.prototype.setPassword = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string dbId = 4;
 * @return {string}
 */
proto.space.GeneratePublicFileLinkRequest.prototype.getDbid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GeneratePublicFileLinkRequest} returns this
 */
proto.space.GeneratePublicFileLinkRequest.prototype.setDbid = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GeneratePublicFileLinkResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GeneratePublicFileLinkResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GeneratePublicFileLinkResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GeneratePublicFileLinkResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            link: jspb.Message.getFieldWithDefault(msg, 1, ""),
            filecid: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GeneratePublicFileLinkResponse}
 */
proto.space.GeneratePublicFileLinkResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GeneratePublicFileLinkResponse;
    return proto.space.GeneratePublicFileLinkResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GeneratePublicFileLinkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GeneratePublicFileLinkResponse}
 */
proto.space.GeneratePublicFileLinkResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLink(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setFilecid(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GeneratePublicFileLinkResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GeneratePublicFileLinkResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GeneratePublicFileLinkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GeneratePublicFileLinkResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLink();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getFilecid();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string link = 1;
 * @return {string}
 */
proto.space.GeneratePublicFileLinkResponse.prototype.getLink = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GeneratePublicFileLinkResponse} returns this
 */
proto.space.GeneratePublicFileLinkResponse.prototype.setLink = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string fileCid = 2;
 * @return {string}
 */
proto.space.GeneratePublicFileLinkResponse.prototype.getFilecid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GeneratePublicFileLinkResponse} returns this
 */
proto.space.GeneratePublicFileLinkResponse.prototype.setFilecid = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ToggleFuseRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ToggleFuseRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ToggleFuseRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ToggleFuseRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            mountdrive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ToggleFuseRequest}
 */
proto.space.ToggleFuseRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ToggleFuseRequest;
    return proto.space.ToggleFuseRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ToggleFuseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ToggleFuseRequest}
 */
proto.space.ToggleFuseRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMountdrive(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ToggleFuseRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ToggleFuseRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ToggleFuseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ToggleFuseRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMountdrive();
    if (f) {
        writer.writeBool(1, f);
    }
};
/**
 * optional bool mountDrive = 1;
 * @return {boolean}
 */
proto.space.ToggleFuseRequest.prototype.getMountdrive = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.ToggleFuseRequest} returns this
 */
proto.space.ToggleFuseRequest.prototype.setMountdrive = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.FuseDriveResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.FuseDriveResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.FuseDriveResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.FuseDriveResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            fusedrivemounted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.FuseDriveResponse}
 */
proto.space.FuseDriveResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.FuseDriveResponse;
    return proto.space.FuseDriveResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.FuseDriveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.FuseDriveResponse}
 */
proto.space.FuseDriveResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setFusedrivemounted(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.FuseDriveResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.FuseDriveResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.FuseDriveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.FuseDriveResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFusedrivemounted();
    if (f) {
        writer.writeBool(1, f);
    }
};
/**
 * optional bool fuseDriveMounted = 1;
 * @return {boolean}
 */
proto.space.FuseDriveResponse.prototype.getFusedrivemounted = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.FuseDriveResponse} returns this
 */
proto.space.FuseDriveResponse.prototype.setFusedrivemounted = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ListBucketsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ListBucketsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ListBucketsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ListBucketsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ListBucketsRequest}
 */
proto.space.ListBucketsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ListBucketsRequest;
    return proto.space.ListBucketsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ListBucketsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ListBucketsRequest}
 */
proto.space.ListBucketsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ListBucketsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ListBucketsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ListBucketsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ListBucketsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.ListBucketsResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ListBucketsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ListBucketsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ListBucketsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ListBucketsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            bucketsList: jspb.Message.toObjectList(msg.getBucketsList(), proto.space.Bucket.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ListBucketsResponse}
 */
proto.space.ListBucketsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ListBucketsResponse;
    return proto.space.ListBucketsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ListBucketsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ListBucketsResponse}
 */
proto.space.ListBucketsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.Bucket;
                reader.readMessage(value, proto.space.Bucket.deserializeBinaryFromReader);
                msg.addBuckets(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ListBucketsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ListBucketsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ListBucketsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ListBucketsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBucketsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.space.Bucket.serializeBinaryToWriter);
    }
};
/**
 * repeated Bucket buckets = 1;
 * @return {!Array<!proto.space.Bucket>}
 */
proto.space.ListBucketsResponse.prototype.getBucketsList = function () {
    return /** @type{!Array<!proto.space.Bucket>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.Bucket, 1));
};
/**
 * @param {!Array<!proto.space.Bucket>} value
 * @return {!proto.space.ListBucketsResponse} returns this
*/
proto.space.ListBucketsResponse.prototype.setBucketsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.space.Bucket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.Bucket}
 */
proto.space.ListBucketsResponse.prototype.addBuckets = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.space.Bucket, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.ListBucketsResponse} returns this
 */
proto.space.ListBucketsResponse.prototype.clearBucketsList = function () {
    return this.setBucketsList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.Invitation.repeatedFields_ = [5];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.Invitation.prototype.toObject = function (opt_includeInstance) {
        return proto.space.Invitation.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.Invitation} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.Invitation.toObject = function (includeInstance, msg) {
        var f, obj = {
            inviterpublickey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            invitationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
            status: jspb.Message.getFieldWithDefault(msg, 4, 0),
            itempathsList: jspb.Message.toObjectList(msg.getItempathsList(), proto.space.FullPath.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.Invitation}
 */
proto.space.Invitation.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.Invitation;
    return proto.space.Invitation.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.Invitation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.Invitation}
 */
proto.space.Invitation.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setInviterpublickey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setInvitationid(value);
                break;
            case 4:
                var value = /** @type {!proto.space.InvitationStatus} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 5:
                var value = new proto.space.FullPath;
                reader.readMessage(value, proto.space.FullPath.deserializeBinaryFromReader);
                msg.addItempaths(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.Invitation.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.Invitation.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.Invitation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.Invitation.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getInviterpublickey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getInvitationid();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(4, f);
    }
    f = message.getItempathsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(5, f, proto.space.FullPath.serializeBinaryToWriter);
    }
};
/**
 * optional string inviterPublicKey = 1;
 * @return {string}
 */
proto.space.Invitation.prototype.getInviterpublickey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Invitation} returns this
 */
proto.space.Invitation.prototype.setInviterpublickey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string invitationID = 2;
 * @return {string}
 */
proto.space.Invitation.prototype.getInvitationid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Invitation} returns this
 */
proto.space.Invitation.prototype.setInvitationid = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional InvitationStatus status = 4;
 * @return {!proto.space.InvitationStatus}
 */
proto.space.Invitation.prototype.getStatus = function () {
    return /** @type {!proto.space.InvitationStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {!proto.space.InvitationStatus} value
 * @return {!proto.space.Invitation} returns this
 */
proto.space.Invitation.prototype.setStatus = function (value) {
    return jspb.Message.setProto3EnumField(this, 4, value);
};
/**
 * repeated FullPath itemPaths = 5;
 * @return {!Array<!proto.space.FullPath>}
 */
proto.space.Invitation.prototype.getItempathsList = function () {
    return /** @type{!Array<!proto.space.FullPath>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.FullPath, 5));
};
/**
 * @param {!Array<!proto.space.FullPath>} value
 * @return {!proto.space.Invitation} returns this
*/
proto.space.Invitation.prototype.setItempathsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 5, value);
};
/**
 * @param {!proto.space.FullPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.FullPath}
 */
proto.space.Invitation.prototype.addItempaths = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.space.FullPath, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.Invitation} returns this
 */
proto.space.Invitation.prototype.clearItempathsList = function () {
    return this.setItempathsList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.UsageAlert.prototype.toObject = function (opt_includeInstance) {
        return proto.space.UsageAlert.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.UsageAlert} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.UsageAlert.toObject = function (includeInstance, msg) {
        var f, obj = {
            used: jspb.Message.getFieldWithDefault(msg, 1, 0),
            limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
            message: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.UsageAlert}
 */
proto.space.UsageAlert.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.UsageAlert;
    return proto.space.UsageAlert.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.UsageAlert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.UsageAlert}
 */
proto.space.UsageAlert.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setUsed(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLimit(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setMessage(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.UsageAlert.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.UsageAlert.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.UsageAlert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.UsageAlert.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsed();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getLimit();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
    f = message.getMessage();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional int64 used = 1;
 * @return {number}
 */
proto.space.UsageAlert.prototype.getUsed = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.UsageAlert} returns this
 */
proto.space.UsageAlert.prototype.setUsed = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.space.UsageAlert.prototype.getLimit = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.UsageAlert} returns this
 */
proto.space.UsageAlert.prototype.setLimit = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional string message = 3;
 * @return {string}
 */
proto.space.UsageAlert.prototype.getMessage = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.UsageAlert} returns this
 */
proto.space.UsageAlert.prototype.setMessage = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.InvitationAccept.prototype.toObject = function (opt_includeInstance) {
        return proto.space.InvitationAccept.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.InvitationAccept} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.InvitationAccept.toObject = function (includeInstance, msg) {
        var f, obj = {
            invitationid: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.InvitationAccept}
 */
proto.space.InvitationAccept.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.InvitationAccept;
    return proto.space.InvitationAccept.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.InvitationAccept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.InvitationAccept}
 */
proto.space.InvitationAccept.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setInvitationid(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.InvitationAccept.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.InvitationAccept.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.InvitationAccept} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.InvitationAccept.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getInvitationid();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string invitationID = 2;
 * @return {string}
 */
proto.space.InvitationAccept.prototype.getInvitationid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.InvitationAccept} returns this
 */
proto.space.InvitationAccept.prototype.setInvitationid = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.space.Notification.oneofGroups_ = [[4, 5, 6]];
/**
 * @enum {number}
 */
proto.space.Notification.RelatedobjectCase = {
    RELATEDOBJECT_NOT_SET: 0,
    INVITATIONVALUE: 4,
    USAGEALERT: 5,
    INVITATIONACCEPT: 6
};
/**
 * @return {proto.space.Notification.RelatedobjectCase}
 */
proto.space.Notification.prototype.getRelatedobjectCase = function () {
    return /** @type {proto.space.Notification.RelatedobjectCase} */ (jspb.Message.computeOneofCase(this, proto.space.Notification.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.Notification.prototype.toObject = function (opt_includeInstance) {
        return proto.space.Notification.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.Notification} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.Notification.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ""),
            subject: jspb.Message.getFieldWithDefault(msg, 2, ""),
            body: jspb.Message.getFieldWithDefault(msg, 3, ""),
            invitationvalue: (f = msg.getInvitationvalue()) && proto.space.Invitation.toObject(includeInstance, f),
            usagealert: (f = msg.getUsagealert()) && proto.space.UsageAlert.toObject(includeInstance, f),
            invitationaccept: (f = msg.getInvitationaccept()) && proto.space.InvitationAccept.toObject(includeInstance, f),
            type: jspb.Message.getFieldWithDefault(msg, 7, 0),
            createdat: jspb.Message.getFieldWithDefault(msg, 8, 0),
            readat: jspb.Message.getFieldWithDefault(msg, 9, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.Notification}
 */
proto.space.Notification.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.Notification;
    return proto.space.Notification.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.Notification}
 */
proto.space.Notification.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSubject(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setBody(value);
                break;
            case 4:
                var value = new proto.space.Invitation;
                reader.readMessage(value, proto.space.Invitation.deserializeBinaryFromReader);
                msg.setInvitationvalue(value);
                break;
            case 5:
                var value = new proto.space.UsageAlert;
                reader.readMessage(value, proto.space.UsageAlert.deserializeBinaryFromReader);
                msg.setUsagealert(value);
                break;
            case 6:
                var value = new proto.space.InvitationAccept;
                reader.readMessage(value, proto.space.InvitationAccept.deserializeBinaryFromReader);
                msg.setInvitationaccept(value);
                break;
            case 7:
                var value = /** @type {!proto.space.NotificationType} */ (reader.readEnum());
                msg.setType(value);
                break;
            case 8:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setCreatedat(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setReadat(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.Notification.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.Notification.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.Notification.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getSubject();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getBody();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getInvitationvalue();
    if (f != null) {
        writer.writeMessage(4, f, proto.space.Invitation.serializeBinaryToWriter);
    }
    f = message.getUsagealert();
    if (f != null) {
        writer.writeMessage(5, f, proto.space.UsageAlert.serializeBinaryToWriter);
    }
    f = message.getInvitationaccept();
    if (f != null) {
        writer.writeMessage(6, f, proto.space.InvitationAccept.serializeBinaryToWriter);
    }
    f = message.getType();
    if (f !== 0.0) {
        writer.writeEnum(7, f);
    }
    f = message.getCreatedat();
    if (f !== 0) {
        writer.writeInt64(8, f);
    }
    f = message.getReadat();
    if (f !== 0) {
        writer.writeInt64(9, f);
    }
};
/**
 * optional string ID = 1;
 * @return {string}
 */
proto.space.Notification.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.setId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string subject = 2;
 * @return {string}
 */
proto.space.Notification.prototype.getSubject = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.setSubject = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string body = 3;
 * @return {string}
 */
proto.space.Notification.prototype.getBody = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.setBody = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional Invitation invitationValue = 4;
 * @return {?proto.space.Invitation}
 */
proto.space.Notification.prototype.getInvitationvalue = function () {
    return /** @type{?proto.space.Invitation} */ (jspb.Message.getWrapperField(this, proto.space.Invitation, 4));
};
/**
 * @param {?proto.space.Invitation|undefined} value
 * @return {!proto.space.Notification} returns this
*/
proto.space.Notification.prototype.setInvitationvalue = function (value) {
    return jspb.Message.setOneofWrapperField(this, 4, proto.space.Notification.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.clearInvitationvalue = function () {
    return this.setInvitationvalue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.Notification.prototype.hasInvitationvalue = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional UsageAlert usageAlert = 5;
 * @return {?proto.space.UsageAlert}
 */
proto.space.Notification.prototype.getUsagealert = function () {
    return /** @type{?proto.space.UsageAlert} */ (jspb.Message.getWrapperField(this, proto.space.UsageAlert, 5));
};
/**
 * @param {?proto.space.UsageAlert|undefined} value
 * @return {!proto.space.Notification} returns this
*/
proto.space.Notification.prototype.setUsagealert = function (value) {
    return jspb.Message.setOneofWrapperField(this, 5, proto.space.Notification.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.clearUsagealert = function () {
    return this.setUsagealert(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.Notification.prototype.hasUsagealert = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional InvitationAccept invitationAccept = 6;
 * @return {?proto.space.InvitationAccept}
 */
proto.space.Notification.prototype.getInvitationaccept = function () {
    return /** @type{?proto.space.InvitationAccept} */ (jspb.Message.getWrapperField(this, proto.space.InvitationAccept, 6));
};
/**
 * @param {?proto.space.InvitationAccept|undefined} value
 * @return {!proto.space.Notification} returns this
*/
proto.space.Notification.prototype.setInvitationaccept = function (value) {
    return jspb.Message.setOneofWrapperField(this, 6, proto.space.Notification.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.clearInvitationaccept = function () {
    return this.setInvitationaccept(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.Notification.prototype.hasInvitationaccept = function () {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional NotificationType type = 7;
 * @return {!proto.space.NotificationType}
 */
proto.space.Notification.prototype.getType = function () {
    return /** @type {!proto.space.NotificationType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};
/**
 * @param {!proto.space.NotificationType} value
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.setType = function (value) {
    return jspb.Message.setProto3EnumField(this, 7, value);
};
/**
 * optional int64 createdAt = 8;
 * @return {number}
 */
proto.space.Notification.prototype.getCreatedat = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.setCreatedat = function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
};
/**
 * optional int64 readAt = 9;
 * @return {number}
 */
proto.space.Notification.prototype.getReadat = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.Notification} returns this
 */
proto.space.Notification.prototype.setReadat = function (value) {
    return jspb.Message.setProto3IntField(this, 9, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.HandleFilesInvitationRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.HandleFilesInvitationRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.HandleFilesInvitationRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.HandleFilesInvitationRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            invitationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            accept: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.HandleFilesInvitationRequest}
 */
proto.space.HandleFilesInvitationRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.HandleFilesInvitationRequest;
    return proto.space.HandleFilesInvitationRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.HandleFilesInvitationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.HandleFilesInvitationRequest}
 */
proto.space.HandleFilesInvitationRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setInvitationid(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setAccept(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.HandleFilesInvitationRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.HandleFilesInvitationRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.HandleFilesInvitationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.HandleFilesInvitationRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getInvitationid();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAccept();
    if (f) {
        writer.writeBool(2, f);
    }
};
/**
 * optional string invitationID = 1;
 * @return {string}
 */
proto.space.HandleFilesInvitationRequest.prototype.getInvitationid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.HandleFilesInvitationRequest} returns this
 */
proto.space.HandleFilesInvitationRequest.prototype.setInvitationid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bool accept = 2;
 * @return {boolean}
 */
proto.space.HandleFilesInvitationRequest.prototype.getAccept = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};
/**
 * @param {boolean} value
 * @return {!proto.space.HandleFilesInvitationRequest} returns this
 */
proto.space.HandleFilesInvitationRequest.prototype.setAccept = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.HandleFilesInvitationResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.HandleFilesInvitationResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.HandleFilesInvitationResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.HandleFilesInvitationResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.HandleFilesInvitationResponse}
 */
proto.space.HandleFilesInvitationResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.HandleFilesInvitationResponse;
    return proto.space.HandleFilesInvitationResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.HandleFilesInvitationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.HandleFilesInvitationResponse}
 */
proto.space.HandleFilesInvitationResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.HandleFilesInvitationResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.HandleFilesInvitationResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.HandleFilesInvitationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.HandleFilesInvitationResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.NotificationEventResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.NotificationEventResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.NotificationEventResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.NotificationEventResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            notification: (f = msg.getNotification()) && proto.space.Notification.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.NotificationEventResponse}
 */
proto.space.NotificationEventResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.NotificationEventResponse;
    return proto.space.NotificationEventResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.NotificationEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.NotificationEventResponse}
 */
proto.space.NotificationEventResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.Notification;
                reader.readMessage(value, proto.space.Notification.deserializeBinaryFromReader);
                msg.setNotification(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.NotificationEventResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.NotificationEventResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.NotificationEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.NotificationEventResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNotification();
    if (f != null) {
        writer.writeMessage(1, f, proto.space.Notification.serializeBinaryToWriter);
    }
};
/**
 * optional Notification notification = 1;
 * @return {?proto.space.Notification}
 */
proto.space.NotificationEventResponse.prototype.getNotification = function () {
    return /** @type{?proto.space.Notification} */ (jspb.Message.getWrapperField(this, proto.space.Notification, 1));
};
/**
 * @param {?proto.space.Notification|undefined} value
 * @return {!proto.space.NotificationEventResponse} returns this
*/
proto.space.NotificationEventResponse.prototype.setNotification = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.space.NotificationEventResponse} returns this
 */
proto.space.NotificationEventResponse.prototype.clearNotification = function () {
    return this.setNotification(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.space.NotificationEventResponse.prototype.hasNotification = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetNotificationsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetNotificationsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetNotificationsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetNotificationsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            seek: jspb.Message.getFieldWithDefault(msg, 1, ""),
            limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetNotificationsRequest}
 */
proto.space.GetNotificationsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetNotificationsRequest;
    return proto.space.GetNotificationsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetNotificationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetNotificationsRequest}
 */
proto.space.GetNotificationsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSeek(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLimit(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetNotificationsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetNotificationsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetNotificationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetNotificationsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSeek();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getLimit();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
};
/**
 * optional string seek = 1;
 * @return {string}
 */
proto.space.GetNotificationsRequest.prototype.getSeek = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetNotificationsRequest} returns this
 */
proto.space.GetNotificationsRequest.prototype.setSeek = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.space.GetNotificationsRequest.prototype.getLimit = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetNotificationsRequest} returns this
 */
proto.space.GetNotificationsRequest.prototype.setLimit = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.GetNotificationsResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetNotificationsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetNotificationsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetNotificationsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetNotificationsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            notificationsList: jspb.Message.toObjectList(msg.getNotificationsList(), proto.space.Notification.toObject, includeInstance),
            nextoffset: jspb.Message.getFieldWithDefault(msg, 2, ""),
            lastseenat: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetNotificationsResponse}
 */
proto.space.GetNotificationsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetNotificationsResponse;
    return proto.space.GetNotificationsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetNotificationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetNotificationsResponse}
 */
proto.space.GetNotificationsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.Notification;
                reader.readMessage(value, proto.space.Notification.deserializeBinaryFromReader);
                msg.addNotifications(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNextoffset(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLastseenat(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetNotificationsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetNotificationsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetNotificationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetNotificationsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNotificationsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.space.Notification.serializeBinaryToWriter);
    }
    f = message.getNextoffset();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getLastseenat();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
};
/**
 * repeated Notification notifications = 1;
 * @return {!Array<!proto.space.Notification>}
 */
proto.space.GetNotificationsResponse.prototype.getNotificationsList = function () {
    return /** @type{!Array<!proto.space.Notification>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.Notification, 1));
};
/**
 * @param {!Array<!proto.space.Notification>} value
 * @return {!proto.space.GetNotificationsResponse} returns this
*/
proto.space.GetNotificationsResponse.prototype.setNotificationsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.space.Notification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.Notification}
 */
proto.space.GetNotificationsResponse.prototype.addNotifications = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.space.Notification, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.GetNotificationsResponse} returns this
 */
proto.space.GetNotificationsResponse.prototype.clearNotificationsList = function () {
    return this.setNotificationsList([]);
};
/**
 * optional string nextOffset = 2;
 * @return {string}
 */
proto.space.GetNotificationsResponse.prototype.getNextoffset = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetNotificationsResponse} returns this
 */
proto.space.GetNotificationsResponse.prototype.setNextoffset = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional int64 lastSeenAt = 3;
 * @return {number}
 */
proto.space.GetNotificationsResponse.prototype.getLastseenat = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.space.GetNotificationsResponse} returns this
 */
proto.space.GetNotificationsResponse.prototype.setLastseenat = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ReadNotificationRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ReadNotificationRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ReadNotificationRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ReadNotificationRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ReadNotificationRequest}
 */
proto.space.ReadNotificationRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ReadNotificationRequest;
    return proto.space.ReadNotificationRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ReadNotificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ReadNotificationRequest}
 */
proto.space.ReadNotificationRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ReadNotificationRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ReadNotificationRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ReadNotificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ReadNotificationRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string ID = 1;
 * @return {string}
 */
proto.space.ReadNotificationRequest.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.ReadNotificationRequest} returns this
 */
proto.space.ReadNotificationRequest.prototype.setId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.ReadNotificationResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.ReadNotificationResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.ReadNotificationResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.ReadNotificationResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.ReadNotificationResponse}
 */
proto.space.ReadNotificationResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.ReadNotificationResponse;
    return proto.space.ReadNotificationResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.ReadNotificationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.ReadNotificationResponse}
 */
proto.space.ReadNotificationResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.ReadNotificationResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.ReadNotificationResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.ReadNotificationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.ReadNotificationResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetPublicKeyRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetPublicKeyRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetPublicKeyRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetPublicKeyRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetPublicKeyRequest}
 */
proto.space.GetPublicKeyRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetPublicKeyRequest;
    return proto.space.GetPublicKeyRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetPublicKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetPublicKeyRequest}
 */
proto.space.GetPublicKeyRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetPublicKeyRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetPublicKeyRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetPublicKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetPublicKeyRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetPublicKeyResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetPublicKeyResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetPublicKeyResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetPublicKeyResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            publickey: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetPublicKeyResponse}
 */
proto.space.GetPublicKeyResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetPublicKeyResponse;
    return proto.space.GetPublicKeyResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetPublicKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetPublicKeyResponse}
 */
proto.space.GetPublicKeyResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPublickey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetPublicKeyResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetPublicKeyResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetPublicKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetPublicKeyResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPublickey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string publicKey = 1;
 * @return {string}
 */
proto.space.GetPublicKeyResponse.prototype.getPublickey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetPublicKeyResponse} returns this
 */
proto.space.GetPublicKeyResponse.prototype.setPublickey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.RecoverKeysByLocalBackupRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.RecoverKeysByLocalBackupRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.RecoverKeysByLocalBackupRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.RecoverKeysByLocalBackupRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            pathtokeybackup: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.RecoverKeysByLocalBackupRequest}
 */
proto.space.RecoverKeysByLocalBackupRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.RecoverKeysByLocalBackupRequest;
    return proto.space.RecoverKeysByLocalBackupRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.RecoverKeysByLocalBackupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.RecoverKeysByLocalBackupRequest}
 */
proto.space.RecoverKeysByLocalBackupRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPathtokeybackup(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.RecoverKeysByLocalBackupRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.RecoverKeysByLocalBackupRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.RecoverKeysByLocalBackupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.RecoverKeysByLocalBackupRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPathtokeybackup();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string pathToKeyBackup = 1;
 * @return {string}
 */
proto.space.RecoverKeysByLocalBackupRequest.prototype.getPathtokeybackup = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.RecoverKeysByLocalBackupRequest} returns this
 */
proto.space.RecoverKeysByLocalBackupRequest.prototype.setPathtokeybackup = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.RecoverKeysByLocalBackupResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.RecoverKeysByLocalBackupResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.RecoverKeysByLocalBackupResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.RecoverKeysByLocalBackupResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.RecoverKeysByLocalBackupResponse}
 */
proto.space.RecoverKeysByLocalBackupResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.RecoverKeysByLocalBackupResponse;
    return proto.space.RecoverKeysByLocalBackupResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.RecoverKeysByLocalBackupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.RecoverKeysByLocalBackupResponse}
 */
proto.space.RecoverKeysByLocalBackupResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.RecoverKeysByLocalBackupResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.RecoverKeysByLocalBackupResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.RecoverKeysByLocalBackupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.RecoverKeysByLocalBackupResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.CreateLocalKeysBackupRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.CreateLocalKeysBackupRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.CreateLocalKeysBackupRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.CreateLocalKeysBackupRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            pathtokeybackup: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.CreateLocalKeysBackupRequest}
 */
proto.space.CreateLocalKeysBackupRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.CreateLocalKeysBackupRequest;
    return proto.space.CreateLocalKeysBackupRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.CreateLocalKeysBackupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.CreateLocalKeysBackupRequest}
 */
proto.space.CreateLocalKeysBackupRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPathtokeybackup(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.CreateLocalKeysBackupRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.CreateLocalKeysBackupRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.CreateLocalKeysBackupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.CreateLocalKeysBackupRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPathtokeybackup();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string pathToKeyBackup = 1;
 * @return {string}
 */
proto.space.CreateLocalKeysBackupRequest.prototype.getPathtokeybackup = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.CreateLocalKeysBackupRequest} returns this
 */
proto.space.CreateLocalKeysBackupRequest.prototype.setPathtokeybackup = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.CreateLocalKeysBackupResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.CreateLocalKeysBackupResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.CreateLocalKeysBackupResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.CreateLocalKeysBackupResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.CreateLocalKeysBackupResponse}
 */
proto.space.CreateLocalKeysBackupResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.CreateLocalKeysBackupResponse;
    return proto.space.CreateLocalKeysBackupResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.CreateLocalKeysBackupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.CreateLocalKeysBackupResponse}
 */
proto.space.CreateLocalKeysBackupResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.CreateLocalKeysBackupResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.CreateLocalKeysBackupResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.CreateLocalKeysBackupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.CreateLocalKeysBackupResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.DeleteAccountRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.DeleteAccountRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.DeleteAccountRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.DeleteAccountRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.DeleteAccountRequest}
 */
proto.space.DeleteAccountRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.DeleteAccountRequest;
    return proto.space.DeleteAccountRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.DeleteAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.DeleteAccountRequest}
 */
proto.space.DeleteAccountRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.DeleteAccountRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.DeleteAccountRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.DeleteAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.DeleteAccountRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.DeleteAccountResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.DeleteAccountResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.DeleteAccountResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.DeleteAccountResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.DeleteAccountResponse}
 */
proto.space.DeleteAccountResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.DeleteAccountResponse;
    return proto.space.DeleteAccountResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.DeleteAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.DeleteAccountResponse}
 */
proto.space.DeleteAccountResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.DeleteAccountResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.DeleteAccountResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.DeleteAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.DeleteAccountResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.DeleteKeyPairRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.DeleteKeyPairRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.DeleteKeyPairRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.DeleteKeyPairRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.DeleteKeyPairRequest}
 */
proto.space.DeleteKeyPairRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.DeleteKeyPairRequest;
    return proto.space.DeleteKeyPairRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.DeleteKeyPairRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.DeleteKeyPairRequest}
 */
proto.space.DeleteKeyPairRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.DeleteKeyPairRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.DeleteKeyPairRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.DeleteKeyPairRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.DeleteKeyPairRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.DeleteKeyPairResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.DeleteKeyPairResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.DeleteKeyPairResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.DeleteKeyPairResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.DeleteKeyPairResponse}
 */
proto.space.DeleteKeyPairResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.DeleteKeyPairResponse;
    return proto.space.DeleteKeyPairResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.DeleteKeyPairResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.DeleteKeyPairResponse}
 */
proto.space.DeleteKeyPairResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.DeleteKeyPairResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.DeleteKeyPairResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.DeleteKeyPairResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.DeleteKeyPairResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetAPISessionTokensRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetAPISessionTokensRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetAPISessionTokensRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetAPISessionTokensRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetAPISessionTokensRequest}
 */
proto.space.GetAPISessionTokensRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetAPISessionTokensRequest;
    return proto.space.GetAPISessionTokensRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetAPISessionTokensRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetAPISessionTokensRequest}
 */
proto.space.GetAPISessionTokensRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetAPISessionTokensRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetAPISessionTokensRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetAPISessionTokensRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetAPISessionTokensRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetAPISessionTokensResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetAPISessionTokensResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetAPISessionTokensResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetAPISessionTokensResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            hubtoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
            servicestoken: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetAPISessionTokensResponse}
 */
proto.space.GetAPISessionTokensResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetAPISessionTokensResponse;
    return proto.space.GetAPISessionTokensResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetAPISessionTokensResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetAPISessionTokensResponse}
 */
proto.space.GetAPISessionTokensResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setHubtoken(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setServicestoken(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetAPISessionTokensResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetAPISessionTokensResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetAPISessionTokensResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetAPISessionTokensResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHubtoken();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getServicestoken();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string hubToken = 1;
 * @return {string}
 */
proto.space.GetAPISessionTokensResponse.prototype.getHubtoken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetAPISessionTokensResponse} returns this
 */
proto.space.GetAPISessionTokensResponse.prototype.setHubtoken = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string servicesToken = 2;
 * @return {string}
 */
proto.space.GetAPISessionTokensResponse.prototype.getServicestoken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.space.GetAPISessionTokensResponse} returns this
 */
proto.space.GetAPISessionTokensResponse.prototype.setServicestoken = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetRecentlySharedWithRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetRecentlySharedWithRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetRecentlySharedWithRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetRecentlySharedWithRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetRecentlySharedWithRequest}
 */
proto.space.GetRecentlySharedWithRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetRecentlySharedWithRequest;
    return proto.space.GetRecentlySharedWithRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetRecentlySharedWithRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetRecentlySharedWithRequest}
 */
proto.space.GetRecentlySharedWithRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetRecentlySharedWithRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetRecentlySharedWithRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetRecentlySharedWithRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetRecentlySharedWithRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.space.GetRecentlySharedWithResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.space.GetRecentlySharedWithResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.space.GetRecentlySharedWithResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.space.GetRecentlySharedWithResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.space.GetRecentlySharedWithResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            membersList: jspb.Message.toObjectList(msg.getMembersList(), proto.space.FileMember.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.space.GetRecentlySharedWithResponse}
 */
proto.space.GetRecentlySharedWithResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.space.GetRecentlySharedWithResponse;
    return proto.space.GetRecentlySharedWithResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.space.GetRecentlySharedWithResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.space.GetRecentlySharedWithResponse}
 */
proto.space.GetRecentlySharedWithResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.space.FileMember;
                reader.readMessage(value, proto.space.FileMember.deserializeBinaryFromReader);
                msg.addMembers(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.space.GetRecentlySharedWithResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.space.GetRecentlySharedWithResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.space.GetRecentlySharedWithResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.space.GetRecentlySharedWithResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMembersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.space.FileMember.serializeBinaryToWriter);
    }
};
/**
 * repeated FileMember members = 1;
 * @return {!Array<!proto.space.FileMember>}
 */
proto.space.GetRecentlySharedWithResponse.prototype.getMembersList = function () {
    return /** @type{!Array<!proto.space.FileMember>} */ (jspb.Message.getRepeatedWrapperField(this, proto.space.FileMember, 1));
};
/**
 * @param {!Array<!proto.space.FileMember>} value
 * @return {!proto.space.GetRecentlySharedWithResponse} returns this
*/
proto.space.GetRecentlySharedWithResponse.prototype.setMembersList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.space.FileMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.space.FileMember}
 */
proto.space.GetRecentlySharedWithResponse.prototype.addMembers = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.space.FileMember, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.space.GetRecentlySharedWithResponse} returns this
 */
proto.space.GetRecentlySharedWithResponse.prototype.clearMembersList = function () {
    return this.setMembersList([]);
};
/**
 * @enum {number}
 */
proto.space.EventType = {
    ENTRY_ADDED: 0,
    ENTRY_DELETED: 1,
    ENTRY_UPDATED: 2
};
/**
 * @enum {number}
 */
proto.space.NotificationType = {
    UNKNOWN: 0,
    INVITATION: 1,
    USAGEALERT: 2,
    INVITATION_REPLY: 3
};
/**
 * @enum {number}
 */
proto.space.InvitationStatus = {
    PENDING: 0,
    ACCEPTED: 1,
    REJECTED: 2
};
goog.object.extend(exports, proto.space);
//# sourceMappingURL=space_pb.js.map