import grpcWeb, { ClientReadableStream } from 'grpc-web';
import { SpaceApiClient } from './definitions/SpaceServiceClientPb';
import { OpenFilePayload, CreateBucketPayload, AddItemsPayload, CreateFolderPayload, BackupKeysByPassphrasePayload, RecoverKeysByPassphrasePayload, ToggleFusePayload, GetFuseDriveStatusPayload, ListDirectoriesPayload, ListDirectoryPayload, ToggleBucketBackupPayload, ShareBucketPayload, JoinBucketPayload, ReadNotificationPayload, GetNotificationsPayload, RestoreKeyPairViaMnemonicPayload, GetSharedWithMeFilesPayload, ShareFilesViaPublicKeyPayload, GeneratePublicFileLinkPayload, TestKeysPassphrasePayload, SetNotificationsLastSeenAtPayload, HandleFilesInvitationPayload } from './types';
import { TextileEventResponse, ListDirectoriesResponse, ToggleBucketBackupResponse, OpenFileResponse, CreateBucketResponse, AddItemsResponse, CreateFolderResponse, BackupKeysByPassphraseResponse, RecoverKeysByPassphraseResponse, FuseDriveResponse, FileEventResponse, FileInfoEventResponse, ListBucketsResponse, ListDirectoryResponse, ShareBucketResponse, JoinBucketResponse, GetPublicKeyResponse, NotificationEventResponse, ReadNotificationResponse, GetNotificationsResponse, HandleFilesInvitationResponse, DeleteKeyPairResponse, GetUsageInfoResponse, GetStoredMnemonicResponse, RestoreKeyPairViaMnemonicResponse, GetSharedWithMeFilesResponse, ShareFilesViaPublicKeyResponse, GetAPISessionTokensResponse, GetRecentlySharedWithResponse, GeneratePublicFileLinkResponse, TestKeysPassphraseResponse, SetNotificationsLastSeenAtResponse, GenerateKeyPairResponse } from './definitions/space_pb';
export interface SpaceClientOpts {
    url: string;
    defaultBucket?: string;
    options?: SpaceApiClient['options_'];
    credentials?: SpaceApiClient['credentials_'];
}
declare class SpaceClient {
    defaultBucket: string;
    instance: SpaceApiClient;
    constructor(opts: SpaceClientOpts);
    listDirectory(payload: ListDirectoryPayload, metadata?: grpcWeb.Metadata): Promise<ListDirectoryResponse>;
    listDirectories(payload: ListDirectoriesPayload, metadata?: grpcWeb.Metadata): Promise<ListDirectoriesResponse>;
    toggleBucketBackup(payload: ToggleBucketBackupPayload, metadata?: grpcWeb.Metadata): Promise<ToggleBucketBackupResponse>;
    fileInfoSubscribe(metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<FileInfoEventResponse>;
    txlSubscribe(metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<TextileEventResponse>;
    openFile(payload: OpenFilePayload, metadata?: grpcWeb.Metadata): Promise<OpenFileResponse>;
    createBucket(payload: CreateBucketPayload, metadata?: grpcWeb.Metadata): Promise<CreateBucketResponse>;
    addItems(payload: AddItemsPayload, metadata?: grpcWeb.Metadata): ClientReadableStream<AddItemsResponse>;
    createFolder(payload: CreateFolderPayload, metadata?: grpcWeb.Metadata): Promise<CreateFolderResponse>;
    backupKeysByPassphrase(payload: BackupKeysByPassphrasePayload, metadata?: grpcWeb.Metadata): Promise<BackupKeysByPassphraseResponse>;
    recoverKeysByPassphrase(payload: RecoverKeysByPassphrasePayload, metadata?: grpcWeb.Metadata): Promise<RecoverKeysByPassphraseResponse>;
    /**
     * [WIP] toggleFuseDrive
     *
     * Not supported by space daemon
     */
    toggleFuseDrive(payload: ToggleFusePayload, metadata?: grpcWeb.Metadata): Promise<FuseDriveResponse>;
    /**
     * [WIP] getFuseDriveStatus
     *
     * Not supported by space daemon
     */
    getFuseDriveStatus(payload: GetFuseDriveStatusPayload, metadata?: grpcWeb.Metadata): Promise<FuseDriveResponse>;
    subscribe(metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<FileEventResponse>;
    /**
     * [WIP] listBuckets
     *
     * Not supported by space daemon
     */
    listBuckets(metadata?: grpcWeb.Metadata): Promise<ListBucketsResponse>;
    shareBucket(payload: ShareBucketPayload, metadata?: grpcWeb.Metadata): Promise<ShareBucketResponse>;
    joinBucket(payload: JoinBucketPayload, metadata?: grpcWeb.Metadata): Promise<JoinBucketResponse>;
    setNotificationsLastSeenAt(payload: SetNotificationsLastSeenAtPayload, metadata?: grpcWeb.Metadata): Promise<SetNotificationsLastSeenAtResponse>;
    getNotifications(payload: GetNotificationsPayload, metadata?: grpcWeb.Metadata): Promise<GetNotificationsResponse>;
    handleFilesInvitation(payload: HandleFilesInvitationPayload, metadata?: grpcWeb.Metadata): Promise<HandleFilesInvitationResponse>;
    getPublicKey(metadata?: grpcWeb.Metadata): Promise<GetPublicKeyResponse>;
    notificationSubscribe(metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<NotificationEventResponse>;
    readNotification(payload: ReadNotificationPayload, metadata?: grpcWeb.Metadata): Promise<ReadNotificationResponse>;
    deleteAccount(payload?: null, metadata?: grpcWeb.Metadata): Promise<ReadNotificationResponse>;
    deleteKeyPair(metadata?: grpcWeb.Metadata): Promise<DeleteKeyPairResponse>;
    getUsageInfo(metadata?: grpcWeb.Metadata): Promise<GetUsageInfoResponse>;
    getStoredMnemonic(metadata?: grpcWeb.Metadata): Promise<GetStoredMnemonicResponse>;
    restoreKeyPairViaMnemonic(payload: RestoreKeyPairViaMnemonicPayload, metadata?: grpcWeb.Metadata): Promise<RestoreKeyPairViaMnemonicResponse>;
    getSharedWithMeFiles(payload: GetSharedWithMeFilesPayload, metadata?: grpcWeb.Metadata): Promise<GetSharedWithMeFilesResponse>;
    shareFilesViaPublicKey(payload: ShareFilesViaPublicKeyPayload, metadata?: grpcWeb.Metadata): Promise<ShareFilesViaPublicKeyResponse>;
    getAPISessionTokens(metadata?: grpcWeb.Metadata): Promise<GetAPISessionTokensResponse>;
    getRecentlySharedWith(metadata?: grpcWeb.Metadata): Promise<GetRecentlySharedWithResponse>;
    generatePublicFileLink(payload: GeneratePublicFileLinkPayload, metadata?: grpcWeb.Metadata): Promise<GeneratePublicFileLinkResponse>;
    testKeysPassphrase(payload: TestKeysPassphrasePayload, metadata?: grpcWeb.Metadata): Promise<TestKeysPassphraseResponse>;
    generateKeyPairWithForce(metadata?: grpcWeb.Metadata): Promise<GenerateKeyPairResponse>;
}
export default SpaceClient;
